/* tslint:disable */
/* eslint-disable */
/**
 * Tokens API
 * Manage Tapis Tokens.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqCreateToken,
    ReqCreateTokenFromJSON,
    ReqCreateTokenToJSON,
    ReqRefreshToken,
    ReqRefreshTokenFromJSON,
    ReqRefreshTokenToJSON,
    RespCreateToken,
    RespCreateTokenFromJSON,
    RespCreateTokenToJSON,
    RespRefreshToken,
    RespRefreshTokenFromJSON,
    RespRefreshTokenToJSON,
} from '../models';

export interface CreateTokenRequest {
    reqCreateToken: ReqCreateToken;
}

export interface RefreshTokenRequest {
    reqRefreshToken: ReqRefreshToken;
}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI {

    /**
     * Generate a token.
     * Generate a token.
     */
    async createTokenRaw(requestParameters: CreateTokenRequest): Promise<runtime.ApiResponse<RespCreateToken>> {
        if (requestParameters.reqCreateToken === null || requestParameters.reqCreateToken === undefined) {
            throw new runtime.RequiredError('reqCreateToken','Required parameter requestParameters.reqCreateToken was null or undefined when calling createToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v3/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateTokenToJSON(requestParameters.reqCreateToken),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateTokenFromJSON(jsonValue));
    }

    /**
     * Generate a token.
     * Generate a token.
     */
    async createToken(requestParameters: CreateTokenRequest): Promise<RespCreateToken> {
        const response = await this.createTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Generate a new token from a refresh token.
     * Generate a new token from a refresh token.
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest): Promise<runtime.ApiResponse<RespRefreshToken>> {
        if (requestParameters.reqRefreshToken === null || requestParameters.reqRefreshToken === undefined) {
            throw new runtime.RequiredError('reqRefreshToken','Required parameter requestParameters.reqRefreshToken was null or undefined when calling refreshToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tokens`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqRefreshTokenToJSON(requestParameters.reqRefreshToken),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespRefreshTokenFromJSON(jsonValue));
    }

    /**
     * Generate a new token from a refresh token.
     * Generate a new token from a refresh token.
     */
    async refreshToken(requestParameters: RefreshTokenRequest): Promise<RespRefreshToken> {
        const response = await this.refreshTokenRaw(requestParameters);
        return await response.value();
    }

}
