/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PodCredentialsResponse,
    PodCredentialsResponseFromJSON,
    PodCredentialsResponseToJSON,
} from '../models';

export interface GetPodCredentialsRequest {
    podId: any;
}

/**
 * 
 */
export class CredentialsApi extends runtime.BaseAPI {

    /**
     * Get the credentials created for a pod.  Note: - These credentials are used in the case of templated pods, but for custom pods they\'re not.  Returns user accessible credentials.
     * get_pod_credentials
     */
    async getPodCredentialsRaw(requestParameters: GetPodCredentialsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodCredentialsResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling getPodCredentials.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/credentials`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodCredentialsResponseFromJSON(jsonValue));
    }

    /**
     * Get the credentials created for a pod.  Note: - These credentials are used in the case of templated pods, but for custom pods they\'re not.  Returns user accessible credentials.
     * get_pod_credentials
     */
    async getPodCredentials(requestParameters: GetPodCredentialsRequest, initOverrides?: RequestInit): Promise<PodCredentialsResponse> {
        const response = await this.getPodCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
