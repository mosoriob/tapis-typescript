/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqSubmitJob,
    ReqSubmitJobFromJSON,
    ReqSubmitJobToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespCancelJob,
    RespCancelJobFromJSON,
    RespCancelJobToJSON,
    RespGetJob,
    RespGetJobFromJSON,
    RespGetJobToJSON,
    RespGetJobList,
    RespGetJobListFromJSON,
    RespGetJobListToJSON,
    RespGetJobOutputList,
    RespGetJobOutputListFromJSON,
    RespGetJobOutputListToJSON,
    RespGetJobStatus,
    RespGetJobStatusFromJSON,
    RespGetJobStatusToJSON,
    RespJobHistory,
    RespJobHistoryFromJSON,
    RespJobHistoryToJSON,
    RespJobSearchAllAttributes,
    RespJobSearchAllAttributesFromJSON,
    RespJobSearchAllAttributesToJSON,
    RespName,
    RespNameFromJSON,
    RespNameToJSON,
    RespSubmitJob,
    RespSubmitJobFromJSON,
    RespSubmitJobToJSON,
} from '../models';

export interface CancelJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetJobHistoryRequest {
    jobUuid: string;
    limit?: number;
    skip?: number;
    pretty?: boolean;
}

export interface GetJobListRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    pretty?: boolean;
}

export interface GetJobOutputDownloadRequest {
    jobUuid: string;
    outputPath: string;
    compress?: boolean;
    format?: string;
    pretty?: boolean;
}

export interface GetJobOutputListRequest {
    jobUuid: string;
    outputPath: string;
    limit?: number;
    skip?: number;
    pretty?: boolean;
}

export interface GetJobSearchListRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    select?: string;
    pretty?: boolean;
}

export interface GetJobSearchListByPostSqlStrRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    select?: string;
    pretty?: boolean;
    body?: object;
}

export interface GetJobStatusRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface ResubmitJobRequest {
    jobuuid: string;
    pretty?: boolean;
}

export interface SubmitJobRequest {
    reqSubmitJob: ReqSubmitJob;
    pretty?: boolean;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Cancel a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async cancelJobRaw(requestParameters: CancelJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespCancelJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling cancelJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/cancel`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCancelJobFromJSON(jsonValue));
    }

    /**
     * Cancel a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async cancelJob(requestParameters: CancelJobRequest, initOverrides?: RequestInit): Promise<RespCancelJob> {
        const response = await this.cancelJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobRaw(requestParameters: GetJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJob(requestParameters: GetJobRequest, initOverrides?: RequestInit): Promise<RespGetJob> {
        const response = await this.getJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve history of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobHistoryRaw(requestParameters: GetJobHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobHistory>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/history`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobHistoryFromJSON(jsonValue));
    }

    /**
     * Retrieve history of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobHistory(requestParameters: GetJobHistoryRequest, initOverrides?: RequestInit): Promise<RespJobHistory> {
        const response = await this.getJobHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for the user.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobListRaw(requestParameters: GetJobListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobListFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for the user.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobList(requestParameters: GetJobListRequest, initOverrides?: RequestInit): Promise<RespGetJobList> {
        const response = await this.getJobListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download job\'s output files for previously submitted job by its UUID. The job must be in a terminal state - FINISHED or FAILED.    The caller must be the job owner, creator or a tenant administrator. The URL must ends with \'/\' even if there is no outputPath is specified. 
     */
    async getJobOutputDownloadRaw(requestParameters: GetJobOutputDownloadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobOutputDownload.');
        }

        if (requestParameters.outputPath === null || requestParameters.outputPath === undefined) {
            throw new runtime.RequiredError('outputPath','Required parameter requestParameters.outputPath was null or undefined when calling getJobOutputDownload.');
        }

        const queryParameters: any = {};

        if (requestParameters.compress !== undefined) {
            queryParameters['compress'] = requestParameters.compress;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/output/download/{outputPath}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))).replace(`{${"outputPath"}}`, encodeURIComponent(String(requestParameters.outputPath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download job\'s output files for previously submitted job by its UUID. The job must be in a terminal state - FINISHED or FAILED.    The caller must be the job owner, creator or a tenant administrator. The URL must ends with \'/\' even if there is no outputPath is specified. 
     */
    async getJobOutputDownload(requestParameters: GetJobOutputDownloadRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getJobOutputDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve job\'s output files list for previously submitted job by its UUID. The job must be in a terminal state (FINISHED or FAILED or CANCELLED)    The caller must be the job owner, creator or a tenant administrator. The URL must ends with \'/\' even if there is no outputPath is specified. 
     */
    async getJobOutputListRaw(requestParameters: GetJobOutputListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobOutputList>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobOutputList.');
        }

        if (requestParameters.outputPath === null || requestParameters.outputPath === undefined) {
            throw new runtime.RequiredError('outputPath','Required parameter requestParameters.outputPath was null or undefined when calling getJobOutputList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/output/list/{outputPath}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))).replace(`{${"outputPath"}}`, encodeURIComponent(String(requestParameters.outputPath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobOutputListFromJSON(jsonValue));
    }

    /**
     * Retrieve job\'s output files list for previously submitted job by its UUID. The job must be in a terminal state (FINISHED or FAILED or CANCELLED)    The caller must be the job owner, creator or a tenant administrator. The URL must ends with \'/\' even if there is no outputPath is specified. 
     */
    async getJobOutputList(requestParameters: GetJobOutputListRequest, initOverrides?: RequestInit): Promise<RespGetJobOutputList> {
        const response = await this.getJobOutputListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchListRaw(requestParameters: GetJobSearchListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobSearchAllAttributes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobSearchAllAttributesFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchList(requestParameters: GetJobSearchListRequest, initOverrides?: RequestInit): Promise<RespJobSearchAllAttributes> {
        const response = await this.getJobSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the request body and pagination information from the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchListByPostSqlStrRaw(requestParameters: GetJobSearchListByPostSqlStrRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobSearchAllAttributes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobSearchAllAttributesFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the request body and pagination information from the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchListByPostSqlStr(requestParameters: GetJobSearchListByPostSqlStrRequest, initOverrides?: RequestInit): Promise<RespJobSearchAllAttributes> {
        const response = await this.getJobSearchListByPostSqlStrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatusRaw(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobStatus>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/status`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobStatusFromJSON(jsonValue));
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatus(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit): Promise<RespGetJobStatus> {
        const response = await this.getJobStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resubmit a job for execution using the original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async resubmitJobRaw(requestParameters: ResubmitJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.jobuuid === null || requestParameters.jobuuid === undefined) {
            throw new runtime.RequiredError('jobuuid','Required parameter requestParameters.jobuuid was null or undefined when calling resubmitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobuuid}/resubmit`.replace(`{${"jobuuid"}}`, encodeURIComponent(String(requestParameters.jobuuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Resubmit a job for execution using the original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async resubmitJob(requestParameters: ResubmitJobRequest, initOverrides?: RequestInit): Promise<RespSubmitJob> {
        const response = await this.resubmitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async submitJobRaw(requestParameters: SubmitJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.reqSubmitJob === null || requestParameters.reqSubmitJob === undefined) {
            throw new runtime.RequiredError('reqSubmitJob','Required parameter requestParameters.reqSubmitJob was null or undefined when calling submitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqSubmitJobToJSON(requestParameters.reqSubmitJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async submitJob(requestParameters: SubmitJobRequest, initOverrides?: RequestInit): Promise<RespSubmitJob> {
        const response = await this.submitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
