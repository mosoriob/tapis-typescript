/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqSubmitJob,
    ReqSubmitJobFromJSON,
    ReqSubmitJobToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespGetJob,
    RespGetJobFromJSON,
    RespGetJobToJSON,
    RespGetJobStatus,
    RespGetJobStatusFromJSON,
    RespGetJobStatusToJSON,
    RespName,
    RespNameFromJSON,
    RespNameToJSON,
    RespSubmitJob,
    RespSubmitJobFromJSON,
    RespSubmitJobToJSON,
} from '../models';

export interface GetJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetJobStatusRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface ResubmitJobRequest {
    jobuuid: string;
    pretty?: boolean;
}

export interface SubmitJobRequest {
    reqSubmitJob: ReqSubmitJob;
    pretty?: boolean;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobRaw(requestParameters: GetJobRequest): Promise<runtime.ApiResponse<RespGetJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJob(requestParameters: GetJobRequest): Promise<RespGetJob> {
        const response = await this.getJobRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatusRaw(requestParameters: GetJobStatusRequest): Promise<runtime.ApiResponse<RespGetJobStatus>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/status`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobStatusFromJSON(jsonValue));
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatus(requestParameters: GetJobStatusRequest): Promise<RespGetJobStatus> {
        const response = await this.getJobStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resubmit a job for execution using the original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async resubmitJobRaw(requestParameters: ResubmitJobRequest): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.jobuuid === null || requestParameters.jobuuid === undefined) {
            throw new runtime.RequiredError('jobuuid','Required parameter requestParameters.jobuuid was null or undefined when calling resubmitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobuuid}/resubmit`.replace(`{${"jobuuid"}}`, encodeURIComponent(String(requestParameters.jobuuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Resubmit a job for execution using the original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async resubmitJob(requestParameters: ResubmitJobRequest): Promise<RespSubmitJob> {
        const response = await this.resubmitJobRaw(requestParameters);
        return await response.value();
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async submitJobRaw(requestParameters: SubmitJobRequest): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.reqSubmitJob === null || requestParameters.reqSubmitJob === undefined) {
            throw new runtime.RequiredError('reqSubmitJob','Required parameter requestParameters.reqSubmitJob was null or undefined when calling submitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqSubmitJobToJSON(requestParameters.reqSubmitJob),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output 
     */
    async submitJob(requestParameters: SubmitJobRequest): Promise<RespSubmitJob> {
        const response = await this.submitJobRaw(requestParameters);
        return await response.value();
    }

}
