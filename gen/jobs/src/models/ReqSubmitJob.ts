/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    JobFileInput,
    JobFileInputFromJSON,
    JobFileInputFromJSONTyped,
    JobFileInputToJSON,
    JobFileInputArray,
    JobFileInputArrayFromJSON,
    JobFileInputArrayFromJSONTyped,
    JobFileInputArrayToJSON,
    JobParameterSet,
    JobParameterSetFromJSON,
    JobParameterSetFromJSONTyped,
    JobParameterSetToJSON,
    NotificationSubscription,
    NotificationSubscriptionFromJSON,
    NotificationSubscriptionFromJSONTyped,
    NotificationSubscriptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqSubmitJob
 */
export interface ReqSubmitJob {
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    appId: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    appVersion: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReqSubmitJob
     */
    archiveOnAppError?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReqSubmitJob
     */
    dynamicExecSystem?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    execSystemId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    execSystemExecDir?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    execSystemInputDir?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    execSystemOutputDir?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    execSystemLogicalQueue?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    archiveSystemId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqSubmitJob
     */
    archiveSystemDir?: string;
    /**
     * 
     * @type {number}
     * @memberof ReqSubmitJob
     */
    nodeCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ReqSubmitJob
     */
    coresPerNode?: number;
    /**
     * 
     * @type {number}
     * @memberof ReqSubmitJob
     */
    memoryMB?: number;
    /**
     * 
     * @type {number}
     * @memberof ReqSubmitJob
     */
    maxMinutes?: number;
    /**
     * 
     * @type {Array<JobFileInput>}
     * @memberof ReqSubmitJob
     */
    fileInputs?: Array<JobFileInput>;
    /**
     * 
     * @type {Array<JobFileInputArray>}
     * @memberof ReqSubmitJob
     */
    fileInputArrays?: Array<JobFileInputArray>;
    /**
     * 
     * @type {JobParameterSet}
     * @memberof ReqSubmitJob
     */
    parameterSet?: JobParameterSet;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqSubmitJob
     */
    execSystemConstraints?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqSubmitJob
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<NotificationSubscription>}
     * @memberof ReqSubmitJob
     */
    subscriptions?: Array<NotificationSubscription>;
}

export function ReqSubmitJobFromJSON(json: any): ReqSubmitJob {
    return ReqSubmitJobFromJSONTyped(json, false);
}

export function ReqSubmitJobFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqSubmitJob {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'appId': json['appId'],
        'appVersion': json['appVersion'],
        'archiveOnAppError': !exists(json, 'archiveOnAppError') ? undefined : json['archiveOnAppError'],
        'dynamicExecSystem': !exists(json, 'dynamicExecSystem') ? undefined : json['dynamicExecSystem'],
        'execSystemId': !exists(json, 'execSystemId') ? undefined : json['execSystemId'],
        'execSystemExecDir': !exists(json, 'execSystemExecDir') ? undefined : json['execSystemExecDir'],
        'execSystemInputDir': !exists(json, 'execSystemInputDir') ? undefined : json['execSystemInputDir'],
        'execSystemOutputDir': !exists(json, 'execSystemOutputDir') ? undefined : json['execSystemOutputDir'],
        'execSystemLogicalQueue': !exists(json, 'execSystemLogicalQueue') ? undefined : json['execSystemLogicalQueue'],
        'archiveSystemId': !exists(json, 'archiveSystemId') ? undefined : json['archiveSystemId'],
        'archiveSystemDir': !exists(json, 'archiveSystemDir') ? undefined : json['archiveSystemDir'],
        'nodeCount': !exists(json, 'nodeCount') ? undefined : json['nodeCount'],
        'coresPerNode': !exists(json, 'coresPerNode') ? undefined : json['coresPerNode'],
        'memoryMB': !exists(json, 'memoryMB') ? undefined : json['memoryMB'],
        'maxMinutes': !exists(json, 'maxMinutes') ? undefined : json['maxMinutes'],
        'fileInputs': !exists(json, 'fileInputs') ? undefined : ((json['fileInputs'] as Array<any>).map(JobFileInputFromJSON)),
        'fileInputArrays': !exists(json, 'fileInputArrays') ? undefined : ((json['fileInputArrays'] as Array<any>).map(JobFileInputArrayFromJSON)),
        'parameterSet': !exists(json, 'parameterSet') ? undefined : JobParameterSetFromJSON(json['parameterSet']),
        'execSystemConstraints': !exists(json, 'execSystemConstraints') ? undefined : json['execSystemConstraints'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'subscriptions': !exists(json, 'subscriptions') ? undefined : ((json['subscriptions'] as Array<any>).map(NotificationSubscriptionFromJSON)),
    };
}

export function ReqSubmitJobToJSON(value?: ReqSubmitJob | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'owner': value.owner,
        'tenant': value.tenant,
        'description': value.description,
        'appId': value.appId,
        'appVersion': value.appVersion,
        'archiveOnAppError': value.archiveOnAppError,
        'dynamicExecSystem': value.dynamicExecSystem,
        'execSystemId': value.execSystemId,
        'execSystemExecDir': value.execSystemExecDir,
        'execSystemInputDir': value.execSystemInputDir,
        'execSystemOutputDir': value.execSystemOutputDir,
        'execSystemLogicalQueue': value.execSystemLogicalQueue,
        'archiveSystemId': value.archiveSystemId,
        'archiveSystemDir': value.archiveSystemDir,
        'nodeCount': value.nodeCount,
        'coresPerNode': value.coresPerNode,
        'memoryMB': value.memoryMB,
        'maxMinutes': value.maxMinutes,
        'fileInputs': value.fileInputs === undefined ? undefined : ((value.fileInputs as Array<any>).map(JobFileInputToJSON)),
        'fileInputArrays': value.fileInputArrays === undefined ? undefined : ((value.fileInputArrays as Array<any>).map(JobFileInputArrayToJSON)),
        'parameterSet': JobParameterSetToJSON(value.parameterSet),
        'execSystemConstraints': value.execSystemConstraints,
        'tags': value.tags,
        'subscriptions': value.subscriptions === undefined ? undefined : ((value.subscriptions as Array<any>).map(NotificationSubscriptionToJSON)),
    };
}


