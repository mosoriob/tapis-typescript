/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BaseResp,
    BaseRespFromJSON,
    BaseRespToJSON,
    ErrorResp,
    ErrorRespFromJSON,
    ErrorRespToJSON,
    PipelineListResp,
    PipelineListRespFromJSON,
    PipelineListRespToJSON,
    PipelinePostReq,
    PipelinePostReqFromJSON,
    PipelinePostReqToJSON,
    PipelineResp,
    PipelineRespFromJSON,
    PipelineRespToJSON,
    ResourceURLResp,
    ResourceURLRespFromJSON,
    ResourceURLRespToJSON,
    StringResp,
    StringRespFromJSON,
    StringRespToJSON,
} from '../models';

export interface AddPipelineArchiveRequest {
    groupId: string;
    pipelineId: string;
    UNKNOWN_PARAM_NAME?: ;
}

export interface ChangePipelineOwnerRequest {
    groupId: string;
    pipelineId: string;
    username: string;
    UNKNOWN_PARAM_NAME?: ;
}

export interface CreatePipelineRequest {
    groupId: string;
    pipelinePostReq: PipelinePostReq;
}

export interface DeletePipelineRequest {
    groupId: string;
    pipelineId: string;
}

export interface GetPipelineRequest {
    groupId: string;
    pipelineId: string;
}

export interface ListPipelinesRequest {
    groupId: string;
}

export interface RemovePipelineArchiveRequest {
    groupId: string;
    pipelineId: string;
}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Add an archive to a pipeline. 
     * Add an archive to a pipeline
     */
    async addPipelineArchiveRaw(requestParameters: AddPipelineArchiveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BaseResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling addPipelineArchive.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling addPipelineArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives/add`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToJSON(requestParameters.UNKNOWN_PARAM_NAME),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseRespFromJSON(jsonValue));
    }

    /**
     * Add an archive to a pipeline. 
     * Add an archive to a pipeline
     */
    async addPipelineArchive(requestParameters: AddPipelineArchiveRequest, initOverrides?: RequestInit): Promise<BaseResp> {
        const response = await this.addPipelineArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the owner of a pipeline. Requesting user must be the current owner 
     * Change pipeline owner
     */
    async changePipelineOwnerRaw(requestParameters: ChangePipelineOwnerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BaseResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling changePipelineOwner.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling changePipelineOwner.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling changePipelineOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/changeOwner/{username}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ToJSON(requestParameters.UNKNOWN_PARAM_NAME),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseRespFromJSON(jsonValue));
    }

    /**
     * Change the owner of a pipeline. Requesting user must be the current owner 
     * Change pipeline owner
     */
    async changePipelineOwner(requestParameters: ChangePipelineOwnerRequest, initOverrides?: RequestInit): Promise<BaseResp> {
        const response = await this.changePipelineOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a pipeline using a request body. Pipeline id must be unique within a group and can be composed of alphanumeric characters and the following special characters [-_.]. 
     * Create a pipeline
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResourceURLResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling createPipeline.');
        }

        if (requestParameters.pipelinePostReq === null || requestParameters.pipelinePostReq === undefined) {
            throw new runtime.RequiredError('pipelinePostReq','Required parameter requestParameters.pipelinePostReq was null or undefined when calling createPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelinePostReqToJSON(requestParameters.pipelinePostReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceURLRespFromJSON(jsonValue));
    }

    /**
     * Create a pipeline using a request body. Pipeline id must be unique within a group and can be composed of alphanumeric characters and the following special characters [-_.]. 
     * Create a pipeline
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit): Promise<ResourceURLResp> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a pipeline 
     * Delete a pipeline
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StringResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling deletePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringRespFromJSON(jsonValue));
    }

    /**
     * Delete a pipeline 
     * Delete a pipeline
     */
    async deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit): Promise<StringResp> {
        const response = await this.deletePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information for a pipeline given the pipeline id 
     * Retrieve pipeline details
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PipelineResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineRespFromJSON(jsonValue));
    }

    /**
     * Retrieve information for a pipeline given the pipeline id 
     * Retrieve pipeline details
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit): Promise<PipelineResp> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of pipelines for all groups that the requesting user belongs to.
     * Retrieve pipelines
     */
    async listPipelinesRaw(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PipelineListResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listPipelines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineListRespFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of pipelines for all groups that the requesting user belongs to.
     * Retrieve pipelines
     */
    async listPipelines(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit): Promise<PipelineListResp> {
        const response = await this.listPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an archive to a pipeline. 
     * Remove archive to a pipeline
     */
    async removePipelineArchiveRaw(requestParameters: RemovePipelineArchiveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BaseResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling removePipelineArchive.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling removePipelineArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives/remove`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseRespFromJSON(jsonValue));
    }

    /**
     * Remove an archive to a pipeline. 
     * Remove archive to a pipeline
     */
    async removePipelineArchive(requestParameters: RemovePipelineArchiveRequest, initOverrides?: RequestInit): Promise<BaseResp> {
        const response = await this.removePipelineArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
