/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArchiveListResp,
    ArchiveListRespFromJSON,
    ArchiveListRespToJSON,
    ArchivePostReq,
    ArchivePostReqFromJSON,
    ArchivePostReqToJSON,
    ArchiveResp,
    ArchiveRespFromJSON,
    ArchiveRespToJSON,
    BaseResp,
    BaseRespFromJSON,
    BaseRespToJSON,
    ErrorResp,
    ErrorRespFromJSON,
    ErrorRespToJSON,
    ResourceURLResp,
    ResourceURLRespFromJSON,
    ResourceURLRespToJSON,
} from '../models';

export interface CreateArchiveRequest {
    groupId: string;
    archivePostReq: ArchivePostReq;
}

export interface GetArchiveRequest {
    groupId: string;
    archiveId: string;
}

export interface ListArchivesRequest {
    groupId: string;
}

export interface RemovePipelineArchiveRequest {
    groupId: string;
    pipelineId: string;
}

/**
 * 
 */
export class ArchivesApi extends runtime.BaseAPI {

    /**
     * Create an Archive. Archives are used to persist the results of a pipeline run 
     * Create an archive
     */
    async createArchiveRaw(requestParameters: CreateArchiveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResourceURLResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling createArchive.');
        }

        if (requestParameters.archivePostReq === null || requestParameters.archivePostReq === undefined) {
            throw new runtime.RequiredError('archivePostReq','Required parameter requestParameters.archivePostReq was null or undefined when calling createArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/archives`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArchivePostReqToJSON(requestParameters.archivePostReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceURLRespFromJSON(jsonValue));
    }

    /**
     * Create an Archive. Archives are used to persist the results of a pipeline run 
     * Create an archive
     */
    async createArchive(requestParameters: CreateArchiveRequest, initOverrides?: RequestInit): Promise<ResourceURLResp> {
        const response = await this.createArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an archive
     * Retrieve an archive
     */
    async getArchiveRaw(requestParameters: GetArchiveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArchiveResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getArchive.');
        }

        if (requestParameters.archiveId === null || requestParameters.archiveId === undefined) {
            throw new runtime.RequiredError('archiveId','Required parameter requestParameters.archiveId was null or undefined when calling getArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/archives/{archive_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"archive_id"}}`, encodeURIComponent(String(requestParameters.archiveId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArchiveRespFromJSON(jsonValue));
    }

    /**
     * Retrieve an archive
     * Retrieve an archive
     */
    async getArchive(requestParameters: GetArchiveRequest, initOverrides?: RequestInit): Promise<ArchiveResp> {
        const response = await this.getArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of archives for in group
     * Retrieve archives
     */
    async listArchivesRaw(requestParameters: ListArchivesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArchiveListResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listArchives.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/archives`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArchiveListRespFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of archives for in group
     * Retrieve archives
     */
    async listArchives(requestParameters: ListArchivesRequest, initOverrides?: RequestInit): Promise<ArchiveListResp> {
        const response = await this.listArchivesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an archive to a pipeline. 
     * Remove archive to a pipeline
     */
    async removePipelineArchiveRaw(requestParameters: RemovePipelineArchiveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BaseResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling removePipelineArchive.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling removePipelineArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives/remove`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseRespFromJSON(jsonValue));
    }

    /**
     * Remove an archive to a pipeline. 
     * Remove archive to a pipeline
     */
    async removePipelineArchive(requestParameters: RemovePipelineArchiveRequest, initOverrides?: RequestInit): Promise<BaseResp> {
        const response = await this.removePipelineArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
