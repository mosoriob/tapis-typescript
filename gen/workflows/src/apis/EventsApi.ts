/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventResp,
    EventRespFromJSON,
    EventRespToJSON,
    RunPipelinePostReq,
    RunPipelinePostReqFromJSON,
    RunPipelinePostReqToJSON,
    WebhookEventPostReq,
    WebhookEventPostReqFromJSON,
    WebhookEventPostReqToJSON,
} from '../models';

export interface ListEventsRequest {
    groupId: string;
    pipelineId: string;
}

export interface RunPipelineRequest {
    groupId: string;
    pipelineId: string;
    runPipelinePostReq: RunPipelinePostReq;
}

export interface RunPipelineWebhookRequest {
    groupId: string;
    pipelineId: string;
    webhookEventPostReq: WebhookEventPostReq;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Retrieve all events for a given pipeline 
     * Retrieve Event details
     */
    async listEventsRaw(requestParameters: ListEventsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EventResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listEvents.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling listEvents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/events`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all events for a given pipeline 
     * Retrieve Event details
     */
    async listEvents(requestParameters: ListEventsRequest, initOverrides?: RequestInit): Promise<EventResp> {
        const response = await this.listEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a pipeline run 
     * Trigger a pipeline run
     */
    async runPipelineRaw(requestParameters: RunPipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EventResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling runPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling runPipeline.');
        }

        if (requestParameters.runPipelinePostReq === null || requestParameters.runPipelinePostReq === undefined) {
            throw new runtime.RequiredError('runPipelinePostReq','Required parameter requestParameters.runPipelinePostReq was null or undefined when calling runPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/events`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RunPipelinePostReqToJSON(requestParameters.runPipelinePostReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventRespFromJSON(jsonValue));
    }

    /**
     * Trigger a pipeline run 
     * Trigger a pipeline run
     */
    async runPipeline(requestParameters: RunPipelineRequest, initOverrides?: RequestInit): Promise<EventResp> {
        const response = await this.runPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a pipeline run 
     * Trigger a pipeline run
     */
    async runPipelineWebhookRaw(requestParameters: RunPipelineWebhookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EventResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling runPipelineWebhook.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling runPipelineWebhook.');
        }

        if (requestParameters.webhookEventPostReq === null || requestParameters.webhookEventPostReq === undefined) {
            throw new runtime.RequiredError('webhookEventPostReq','Required parameter requestParameters.webhookEventPostReq was null or undefined when calling runPipelineWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/webhook`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookEventPostReqToJSON(requestParameters.webhookEventPostReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventRespFromJSON(jsonValue));
    }

    /**
     * Trigger a pipeline run 
     * Trigger a pipeline run
     */
    async runPipelineWebhook(requestParameters: RunPipelineWebhookRequest, initOverrides?: RequestInit): Promise<EventResp> {
        const response = await this.runPipelineWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
