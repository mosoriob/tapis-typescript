/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResp,
    ErrorRespFromJSON,
    ErrorRespToJSON,
    GroupDetailResp,
    GroupDetailRespFromJSON,
    GroupDetailRespToJSON,
    GroupListResp,
    GroupListRespFromJSON,
    GroupListRespToJSON,
    GroupPostReq,
    GroupPostReqFromJSON,
    GroupPostReqToJSON,
    ResourceURLResp,
    ResourceURLRespFromJSON,
    ResourceURLRespToJSON,
} from '../models';

export interface CreateGroupRequest {
    groupPostReq: GroupPostReq;
}

export interface GetGroupRequest {
    groupId: string;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Create a group that perform CRUD operations on workflow resources.  The owner of the group will be made an admin by default. If you want to set other users as admins, you must use the \'\' endpoint. 
     * Create a group
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResourceURLResp>> {
        if (requestParameters.groupPostReq === null || requestParameters.groupPostReq === undefined) {
            throw new runtime.RequiredError('groupPostReq','Required parameter requestParameters.groupPostReq was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupPostReqToJSON(requestParameters.groupPostReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceURLRespFromJSON(jsonValue));
    }

    /**
     * Create a group that perform CRUD operations on workflow resources.  The owner of the group will be made an admin by default. If you want to set other users as admins, you must use the \'\' endpoint. 
     * Create a group
     */
    async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit): Promise<ResourceURLResp> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details for a given group id 
     * Retrieve group details
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GroupDetailResp>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDetailRespFromJSON(jsonValue));
    }

    /**
     * Retrieve details for a given group id 
     * Retrieve group details
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit): Promise<GroupDetailResp> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all groups to which the user belongs 
     * Retrieve groups
     */
    async listGroupsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<GroupListResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupListRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all groups to which the user belongs 
     * Retrieve groups
     */
    async listGroups(initOverrides?: RequestInit): Promise<GroupListResp> {
        const response = await this.listGroupsRaw(initOverrides);
        return await response.value();
    }

}
