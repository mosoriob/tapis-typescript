/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumContextType,
    EnumContextTypeFromJSON,
    EnumContextTypeFromJSONTyped,
    EnumContextTypeToJSON,
    EnumContextVisibility,
    EnumContextVisibilityFromJSON,
    EnumContextVisibilityFromJSONTyped,
    EnumContextVisibilityToJSON,
    ReqBaseContext,
    ReqBaseContextFromJSON,
    ReqBaseContextFromJSONTyped,
    ReqBaseContextToJSON,
    ReqContextCredentials,
    ReqContextCredentialsFromJSON,
    ReqContextCredentialsFromJSONTyped,
    ReqContextCredentialsToJSON,
    ReqNonLocalContextAllOf,
    ReqNonLocalContextAllOfFromJSON,
    ReqNonLocalContextAllOfFromJSONTyped,
    ReqNonLocalContextAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqNonLocalContext
 */
export interface ReqNonLocalContext {
    /**
     * 
     * @type {EnumContextType}
     * @memberof ReqNonLocalContext
     */
    type: EnumContextType;
    /**
     * 
     * @type {EnumContextVisibility}
     * @memberof ReqNonLocalContext
     */
    visibility: EnumContextVisibility;
    /**
     * 
     * @type {ReqContextCredentials}
     * @memberof ReqNonLocalContext
     */
    credentials?: ReqContextCredentials;
    /**
     * 
     * @type {string}
     * @memberof ReqNonLocalContext
     */
    identity_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqNonLocalContext
     */
    url: string;
}

export function ReqNonLocalContextFromJSON(json: any): ReqNonLocalContext {
    return ReqNonLocalContextFromJSONTyped(json, false);
}

export function ReqNonLocalContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqNonLocalContext {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': EnumContextTypeFromJSON(json['type']),
        'visibility': EnumContextVisibilityFromJSON(json['visibility']),
        'credentials': !exists(json, 'credentials') ? undefined : ReqContextCredentialsFromJSON(json['credentials']),
        'identity_uuid': !exists(json, 'identity_uuid') ? undefined : json['identity_uuid'],
        'url': json['url'],
    };
}

export function ReqNonLocalContextToJSON(value?: ReqNonLocalContext | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': EnumContextTypeToJSON(value.type),
        'visibility': EnumContextVisibilityToJSON(value.visibility),
        'credentials': ReqContextCredentialsToJSON(value.credentials),
        'identity_uuid': value.identity_uuid,
        'url': value.url,
    };
}

