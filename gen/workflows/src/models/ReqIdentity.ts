/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumIdentityType,
    EnumIdentityTypeFromJSON,
    EnumIdentityTypeFromJSONTyped,
    EnumIdentityTypeToJSON,
    ReqIdentityCred,
    ReqIdentityCredFromJSON,
    ReqIdentityCredFromJSONTyped,
    ReqIdentityCredToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqIdentity
 */
export interface ReqIdentity {
    /**
     * 
     * @type {string}
     * @memberof ReqIdentity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqIdentity
     */
    description?: string;
    /**
     * 
     * @type {EnumIdentityType}
     * @memberof ReqIdentity
     */
    type: EnumIdentityType;
    /**
     * 
     * @type {ReqIdentityCred}
     * @memberof ReqIdentity
     */
    credentials?: ReqIdentityCred;
}

export function ReqIdentityFromJSON(json: any): ReqIdentity {
    return ReqIdentityFromJSONTyped(json, false);
}

export function ReqIdentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqIdentity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': EnumIdentityTypeFromJSON(json['type']),
        'credentials': !exists(json, 'credentials') ? undefined : ReqIdentityCredFromJSON(json['credentials']),
    };
}

export function ReqIdentityToJSON(value?: ReqIdentity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'type': EnumIdentityTypeToJSON(value.type),
        'credentials': ReqIdentityCredToJSON(value.credentials),
    };
}

