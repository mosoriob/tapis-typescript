/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ETLControlSystem,
    ETLControlSystemFromJSON,
    ETLControlSystemFromJSONTyped,
    ETLControlSystemToJSON,
    ETLDataSystem,
    ETLDataSystemFromJSON,
    ETLDataSystemFromJSONTyped,
    ETLDataSystemToJSON,
    ETLLocalInboxAllOf,
    ETLLocalInboxAllOfFromJSON,
    ETLLocalInboxAllOfFromJSONTyped,
    ETLLocalInboxAllOfToJSON,
    ETLManifestsSystem,
    ETLManifestsSystemFromJSON,
    ETLManifestsSystemFromJSONTyped,
    ETLManifestsSystemToJSON,
    ETLSystemsConfiguration,
    ETLSystemsConfigurationFromJSON,
    ETLSystemsConfigurationFromJSONTyped,
    ETLSystemsConfigurationToJSON,
} from './';

/**
 * 
 * @export
 * @interface ETLLocalInbox
 */
export interface ETLLocalInbox {
    /**
     * 
     * @type {ETLManifestsSystem}
     * @memberof ETLLocalInbox
     */
    manifests: ETLManifestsSystem;
    /**
     * 
     * @type {ETLDataSystem}
     * @memberof ETLLocalInbox
     */
    data: ETLDataSystem;
    /**
     * 
     * @type {ETLControlSystem}
     * @memberof ETLLocalInbox
     */
    control?: ETLControlSystem;
}

export function ETLLocalInboxFromJSON(json: any): ETLLocalInbox {
    return ETLLocalInboxFromJSONTyped(json, false);
}

export function ETLLocalInboxFromJSONTyped(json: any, ignoreDiscriminator: boolean): ETLLocalInbox {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'manifests': ETLManifestsSystemFromJSON(json['manifests']),
        'data': ETLDataSystemFromJSON(json['data']),
        'control': !exists(json, 'control') ? undefined : ETLControlSystemFromJSON(json['control']),
    };
}

export function ETLLocalInboxToJSON(value?: ETLLocalInbox | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'manifests': ETLManifestsSystemToJSON(value.manifests),
        'data': ETLDataSystemToJSON(value.data),
        'control': ETLControlSystemToJSON(value.control),
    };
}

