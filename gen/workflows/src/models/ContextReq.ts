/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    LocalContextReq,
    RegistryContextReq,
    RepoContextReq,
    LocalContextReqFromJSONTyped,
    LocalContextReqToJSON,
    RegistryContextReqFromJSONTyped,
    RegistryContextReqToJSON,
    RepoContextReqFromJSONTyped,
    RepoContextReqToJSON,
} from './';

/**
 * @type ContextReq
 * 
 * @export
 */
export type ContextReq = { type: 'dockerhub' } & RegistryContextReq | { type: 'github' } & RepoContextReq | { type: 'gitlab' } & RepoContextReq | { type: 'local' } & LocalContextReq;

export function ContextReqFromJSON(json: any): ContextReq {
    return ContextReqFromJSONTyped(json, false);
}

export function ContextReqFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContextReq {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'dockerhub':
            return {...RegistryContextReqFromJSONTyped(json, true), type: 'dockerhub'};
        case 'github':
            return {...RepoContextReqFromJSONTyped(json, true), type: 'github'};
        case 'gitlab':
            return {...RepoContextReqFromJSONTyped(json, true), type: 'gitlab'};
        case 'local':
            return {...LocalContextReqFromJSONTyped(json, true), type: 'local'};
        default:
            throw new Error(`No variant of ContextReq exists with 'type=${json['type']}'`);
    }
}

export function ContextReqToJSON(value?: ContextReq | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'dockerhub':
            return RegistryContextReqToJSON(value);
        case 'github':
            return RepoContextReqToJSON(value);
        case 'gitlab':
            return RepoContextReqToJSON(value);
        case 'local':
            return LocalContextReqToJSON(value);
        default:
            throw new Error(`No variant of ContextReq exists with 'type=${value['type']}'`);
    }
}

