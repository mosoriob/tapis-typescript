/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumBuilder,
    EnumBuilderFromJSON,
    EnumBuilderFromJSONTyped,
    EnumBuilderToJSON,
    ReqContext,
    ReqContextFromJSON,
    ReqContextFromJSONTyped,
    ReqContextToJSON,
    ReqDestination,
    ReqDestinationFromJSON,
    ReqDestinationFromJSONTyped,
    ReqDestinationToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqImageBuildTaskAllOf
 */
export interface ReqImageBuildTaskAllOf {
    /**
     * 
     * @type {EnumBuilder}
     * @memberof ReqImageBuildTaskAllOf
     */
    builder: EnumBuilder;
    /**
     * 
     * @type {boolean}
     * @memberof ReqImageBuildTaskAllOf
     */
    cache?: boolean;
    /**
     * 
     * @type {ReqContext}
     * @memberof ReqImageBuildTaskAllOf
     */
    context: ReqContext;
    /**
     * 
     * @type {ReqDestination}
     * @memberof ReqImageBuildTaskAllOf
     */
    destination: ReqDestination;
}

export function ReqImageBuildTaskAllOfFromJSON(json: any): ReqImageBuildTaskAllOf {
    return ReqImageBuildTaskAllOfFromJSONTyped(json, false);
}

export function ReqImageBuildTaskAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqImageBuildTaskAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'builder': EnumBuilderFromJSON(json['builder']),
        'cache': !exists(json, 'cache') ? undefined : json['cache'],
        'context': ReqContextFromJSON(json['context']),
        'destination': ReqDestinationFromJSON(json['destination']),
    };
}

export function ReqImageBuildTaskAllOfToJSON(value?: ReqImageBuildTaskAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'builder': EnumBuilderToJSON(value.builder),
        'cache': value.cache,
        'context': ReqContextToJSON(value.context),
        'destination': ReqDestinationToJSON(value.destination),
    };
}

