/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumBuilder,
    EnumBuilderFromJSON,
    EnumBuilderFromJSONTyped,
    EnumBuilderToJSON,
    EnumPipelineType,
    EnumPipelineTypeFromJSON,
    EnumPipelineTypeFromJSONTyped,
    EnumPipelineTypeToJSON,
    ReqContext,
    ReqContextFromJSON,
    ReqContextFromJSONTyped,
    ReqContextToJSON,
    ReqDestination,
    ReqDestinationFromJSON,
    ReqDestinationFromJSONTyped,
    ReqDestinationToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqCIPipeline
 */
export interface ReqCIPipeline {
    /**
     * 
     * @type {string}
     * @memberof ReqCIPipeline
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReqCIPipeline
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqCIPipeline
     */
    archive_ids?: Array<string>;
    /**
     * 
     * @type {EnumBuilder}
     * @memberof ReqCIPipeline
     */
    builder?: EnumBuilder;
    /**
     * 
     * @type {EnumPipelineType}
     * @memberof ReqCIPipeline
     */
    type: EnumPipelineType;
    /**
     * 
     * @type {ReqContext}
     * @memberof ReqCIPipeline
     */
    context: ReqContext;
    /**
     * 
     * @type {ReqDestination}
     * @memberof ReqCIPipeline
     */
    destination: ReqDestination;
}

export function ReqCIPipelineFromJSON(json: any): ReqCIPipeline {
    return ReqCIPipelineFromJSONTyped(json, false);
}

export function ReqCIPipelineFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqCIPipeline {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'archive_ids': !exists(json, 'archive_ids') ? undefined : json['archive_ids'],
        'builder': !exists(json, 'builder') ? undefined : EnumBuilderFromJSON(json['builder']),
        'type': EnumPipelineTypeFromJSON(json['type']),
        'context': ReqContextFromJSON(json['context']),
        'destination': ReqDestinationFromJSON(json['destination']),
    };
}

export function ReqCIPipelineToJSON(value?: ReqCIPipeline | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'archive_ids': value.archive_ids,
        'builder': EnumBuilderToJSON(value.builder),
        'type': EnumPipelineTypeToJSON(value.type),
        'context': ReqContextToJSON(value.context),
        'destination': ReqDestinationToJSON(value.destination),
    };
}

