/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumInstaller,
    EnumInstallerFromJSON,
    EnumInstallerFromJSONTyped,
    EnumInstallerToJSON,
    EnumRuntimeEnvironment,
    EnumRuntimeEnvironmentFromJSON,
    EnumRuntimeEnvironmentFromJSONTyped,
    EnumRuntimeEnvironmentToJSON,
    GitCloneDetails,
    GitCloneDetailsFromJSON,
    GitCloneDetailsFromJSONTyped,
    GitCloneDetailsToJSON,
} from './';

/**
 * 
 * @export
 * @interface FunctionTaskAllOf
 */
export interface FunctionTaskAllOf {
    /**
     * 
     * @type {Array<GitCloneDetails>}
     * @memberof FunctionTaskAllOf
     */
    git_repositories?: Array<GitCloneDetails>;
    /**
     * 
     * @type {EnumRuntimeEnvironment}
     * @memberof FunctionTaskAllOf
     */
    runtime?: EnumRuntimeEnvironment;
    /**
     * 
     * @type {EnumInstaller}
     * @memberof FunctionTaskAllOf
     */
    installer?: EnumInstaller;
    /**
     * 
     * @type {string}
     * @memberof FunctionTaskAllOf
     */
    command?: string;
    /**
     * 
     * @type {string}
     * @memberof FunctionTaskAllOf
     */
    code?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FunctionTaskAllOf
     */
    packages?: Array<string>;
}

export function FunctionTaskAllOfFromJSON(json: any): FunctionTaskAllOf {
    return FunctionTaskAllOfFromJSONTyped(json, false);
}

export function FunctionTaskAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionTaskAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'git_repositories': !exists(json, 'git_repositories') ? undefined : ((json['git_repositories'] as Array<any>).map(GitCloneDetailsFromJSON)),
        'runtime': !exists(json, 'runtime') ? undefined : EnumRuntimeEnvironmentFromJSON(json['runtime']),
        'installer': !exists(json, 'installer') ? undefined : EnumInstallerFromJSON(json['installer']),
        'command': !exists(json, 'command') ? undefined : json['command'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'packages': !exists(json, 'packages') ? undefined : json['packages'],
    };
}

export function FunctionTaskAllOfToJSON(value?: FunctionTaskAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'git_repositories': value.git_repositories === undefined ? undefined : ((value.git_repositories as Array<any>).map(GitCloneDetailsToJSON)),
        'runtime': EnumRuntimeEnvironmentToJSON(value.runtime),
        'installer': EnumInstallerToJSON(value.installer),
        'command': value.command,
        'code': value.code,
        'packages': value.packages,
    };
}

