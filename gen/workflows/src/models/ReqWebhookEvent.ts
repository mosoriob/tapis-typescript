/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumContextType,
    EnumContextTypeFromJSON,
    EnumContextTypeFromJSONTyped,
    EnumContextTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqWebhookEvent
 */
export interface ReqWebhookEvent {
    /**
     * 
     * @type {string}
     * @memberof ReqWebhookEvent
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqWebhookEvent
     */
    commit?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqWebhookEvent
     */
    commit_sha?: string;
    /**
     * 
     * @type {EnumContextType}
     * @memberof ReqWebhookEvent
     */
    source?: EnumContextType;
    /**
     * 
     * @type {string}
     * @memberof ReqWebhookEvent
     */
    context_url?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqWebhookEvent
     */
    username?: string;
}

export function ReqWebhookEventFromJSON(json: any): ReqWebhookEvent {
    return ReqWebhookEventFromJSONTyped(json, false);
}

export function ReqWebhookEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqWebhookEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'commit': !exists(json, 'commit') ? undefined : json['commit'],
        'commit_sha': !exists(json, 'commit_sha') ? undefined : json['commit_sha'],
        'source': !exists(json, 'source') ? undefined : EnumContextTypeFromJSON(json['source']),
        'context_url': !exists(json, 'context_url') ? undefined : json['context_url'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}

export function ReqWebhookEventToJSON(value?: ReqWebhookEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branch': value.branch,
        'commit': value.commit,
        'commit_sha': value.commit_sha,
        'source': EnumContextTypeToJSON(value.source),
        'context_url': value.context_url,
        'username': value.username,
    };
}

