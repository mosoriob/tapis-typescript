/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ReqDockerhubAuth,
    ReqGithubAuth,
    ReqDockerhubAuthFromJSONTyped,
    ReqDockerhubAuthToJSON,
    ReqGithubAuthFromJSONTyped,
    ReqGithubAuthToJSON,
} from './';

/**
 * @type ReqIdentityCred
 * 
 * @export
 */
export type ReqIdentityCred = { type: 'dockerhub' } & ReqDockerhubAuth | { type: 'github' } & ReqGithubAuth;

export function ReqIdentityCredFromJSON(json: any): ReqIdentityCred {
    return ReqIdentityCredFromJSONTyped(json, false);
}

export function ReqIdentityCredFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqIdentityCred {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'dockerhub':
            return {...ReqDockerhubAuthFromJSONTyped(json, true), type: 'dockerhub'};
        case 'github':
            return {...ReqGithubAuthFromJSONTyped(json, true), type: 'github'};
        default:
            throw new Error(`No variant of ReqIdentityCred exists with 'type=${json['type']}'`);
    }
}

export function ReqIdentityCredToJSON(value?: ReqIdentityCred | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'dockerhub':
            return ReqDockerhubAuthToJSON(value);
        case 'github':
            return ReqGithubAuthToJSON(value);
        default:
            throw new Error(`No variant of ReqIdentityCred exists with 'type=${value['type']}'`);
    }
}

