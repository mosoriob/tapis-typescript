/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActorWorker
 */
export interface ActorWorker {
    /**
     * Identifier for the worker channel; used to send management commands to the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    ch_name?: string;
    /**
     * The container id for the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    cid?: string;
    /**
     * The time (UTC) the worker was created.
     * @type {string}
     * @memberof ActorWorker
     */
    create_time?: string;
    /**
     * unique id for the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    id?: string;
    /**
     * The docker image for the actor assigned to the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    image?: string;
    /**
     * The last ime (UTC) the worker started an execution.
     * @type {string}
     * @memberof ActorWorker
     */
    last_execution_time?: string;
    /**
     * The last ime (UTC) the worker responded to a health check.
     * @type {string}
     * @memberof ActorWorker
     */
    last_health_check_time?: string;
    /**
     * The location of the docker daemon used by this worker.
     * @type {string}
     * @memberof ActorWorker
     */
    location?: string;
    /**
     * Status of the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    status?: ActorWorkerStatusEnum;
    /**
     * tenant assoicated with the worker.
     * @type {string}
     * @memberof ActorWorker
     */
    tenant?: string;
}

/**
* @export
* @enum {string}
*/
export enum ActorWorkerStatusEnum {
    Requested = 'REQUESTED',
    SpawnerSetup = 'SPAWNER SETUP',
    PullingImage = 'PULLING IMAGE',
    CreatingContainer = 'CREATING CONTAINER',
    UpdatingStore = 'UPDATING STORE',
    Ready = 'READY',
    Busy = 'BUSY',
    Error = 'ERROR'
}

export function ActorWorkerFromJSON(json: any): ActorWorker {
    return ActorWorkerFromJSONTyped(json, false);
}

export function ActorWorkerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorWorker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ch_name': !exists(json, 'ch_name') ? undefined : json['ch_name'],
        'cid': !exists(json, 'cid') ? undefined : json['cid'],
        'create_time': !exists(json, 'create_time') ? undefined : json['create_time'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'last_execution_time': !exists(json, 'last_execution_time') ? undefined : json['last_execution_time'],
        'last_health_check_time': !exists(json, 'last_health_check_time') ? undefined : json['last_health_check_time'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
    };
}

export function ActorWorkerToJSON(value?: ActorWorker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ch_name': value.ch_name,
        'cid': value.cid,
        'create_time': value.create_time,
        'id': value.id,
        'image': value.image,
        'last_execution_time': value.last_execution_time,
        'last_health_check_time': value.last_health_check_time,
        'location': value.location,
        'status': value.status,
        'tenant': value.tenant,
    };
}

