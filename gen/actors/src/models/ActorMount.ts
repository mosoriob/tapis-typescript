/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActorMount
 */
export interface ActorMount {
    /**
     * Path within the actor container for the mount.
     * @type {string}
     * @memberof ActorMount
     */
    container_path?: string;
    /**
     * Path on the Abaco compute node for the mount.
     * @type {string}
     * @memberof ActorMount
     */
    host_path?: string;
    /**
     * Mode for the mount (ro for read-only, rw for read-write).
     * @type {string}
     * @memberof ActorMount
     */
    mode?: ActorMountModeEnum;
}

/**
* @export
* @enum {string}
*/
export enum ActorMountModeEnum {
    Ro = 'ro',
    Rw = 'rw'
}

export function ActorMountFromJSON(json: any): ActorMount {
    return ActorMountFromJSONTyped(json, false);
}

export function ActorMountFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorMount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'container_path': !exists(json, 'container_path') ? undefined : json['container_path'],
        'host_path': !exists(json, 'host_path') ? undefined : json['host_path'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
    };
}

export function ActorMountToJSON(value?: ActorMount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'container_path': value.container_path,
        'host_path': value.host_path,
        'mode': value.mode,
    };
}

