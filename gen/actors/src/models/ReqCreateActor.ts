/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReqCreateActor
 */
export interface ReqCreateActor {
    /**
     * The Docker image associated with the actor.
     * @type {string}
     * @memberof ReqCreateActor
     */
    image: string;
    /**
     * Whether this actor requires an OAuth token.
     * @type {boolean}
     * @memberof ReqCreateActor
     */
    token?: boolean;
    /**
     * The default environment variables and values for the actor.
     * @type {object}
     * @memberof ReqCreateActor
     */
    defaultEnvironment?: object;
    /**
     * User provided description of the actor.
     * @type {string}
     * @memberof ReqCreateActor
     */
    description?: string;
    /**
     * Whether the actor runs in privileged mode (requires admin role).
     * @type {boolean}
     * @memberof ReqCreateActor
     */
    privileged?: boolean;
    /**
     * The command channel that this actor uses.
     * @type {string}
     * @memberof ReqCreateActor
     */
    queue?: string | null;
    /**
     * Whether the actor stores private state between executions.
     * @type {boolean}
     * @memberof ReqCreateActor
     */
    stateless?: boolean;
    /**
     * Actor identifier of actor to link this actor's events too. May be an actor id or an alias. Cycles not permitted.
     * @type {string}
     * @memberof ReqCreateActor
     */
    link?: string | null;
}

export function ReqCreateActorFromJSON(json: any): ReqCreateActor {
    return ReqCreateActorFromJSONTyped(json, false);
}

export function ReqCreateActorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqCreateActor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'image': json['image'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'defaultEnvironment': !exists(json, 'defaultEnvironment') ? undefined : json['defaultEnvironment'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'privileged': !exists(json, 'privileged') ? undefined : json['privileged'],
        'queue': !exists(json, 'queue') ? undefined : json['queue'],
        'stateless': !exists(json, 'stateless') ? undefined : json['stateless'],
        'link': !exists(json, 'link') ? undefined : json['link'],
    };
}

export function ReqCreateActorToJSON(value?: ReqCreateActor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'image': value.image,
        'token': value.token,
        'defaultEnvironment': value.defaultEnvironment,
        'description': value.description,
        'privileged': value.privileged,
        'queue': value.queue,
        'stateless': value.stateless,
        'link': value.link,
    };
}

