/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActorNonce
 */
export interface ActorNonce {
    /**
     * the id of the nonce
     * @type {string}
     * @memberof ActorNonce
     */
    id?: string;
    /**
     * The permission level associated with the nonce.
     * @type {string}
     * @memberof ActorNonce
     */
    level?: ActorNonceLevelEnum;
    /**
     * Max uses for the nonce; set to -1 for unlimited uses.
     * @type {number}
     * @memberof ActorNonce
     */
    max_uses?: number;
    /**
     * the id of the actor
     * @type {string}
     * @memberof ActorNonce
     */
    actor_id?: string;
    /**
     * the base URL for this Abaco instance.
     * @type {string}
     * @memberof ActorNonce
     */
    api_server?: string;
    /**
     * The user who owns the associated actor.
     * @type {string}
     * @memberof ActorNonce
     */
    owner?: string;
    /**
     * Time (in UTC) the nonce was created.
     * @type {string}
     * @memberof ActorNonce
     */
    create_time?: string;
    /**
     * Number of uses remaining for the nonce; set to -1 for unlimited uses.
     * @type {number}
     * @memberof ActorNonce
     */
    remaining_uses?: number;
    /**
     * The roles associated with the nonce.
     * @type {Array<string>}
     * @memberof ActorNonce
     */
    roles?: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum ActorNonceLevelEnum {
    Read = 'READ',
    Write = 'WRITE',
    Execute = 'EXECUTE'
}

export function ActorNonceFromJSON(json: any): ActorNonce {
    return ActorNonceFromJSONTyped(json, false);
}

export function ActorNonceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorNonce {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'level': !exists(json, 'level') ? undefined : json['level'],
        'max_uses': !exists(json, 'max_uses') ? undefined : json['max_uses'],
        'actor_id': !exists(json, 'actor_id') ? undefined : json['actor_id'],
        'api_server': !exists(json, 'api_server') ? undefined : json['api_server'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'create_time': !exists(json, 'create_time') ? undefined : json['create_time'],
        'remaining_uses': !exists(json, 'remaining_uses') ? undefined : json['remaining_uses'],
        'roles': !exists(json, 'roles') ? undefined : json['roles'],
    };
}

export function ActorNonceToJSON(value?: ActorNonce | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'level': value.level,
        'max_uses': value.max_uses,
        'actor_id': value.actor_id,
        'api_server': value.api_server,
        'owner': value.owner,
        'create_time': value.create_time,
        'remaining_uses': value.remaining_uses,
        'roles': value.roles,
    };
}

