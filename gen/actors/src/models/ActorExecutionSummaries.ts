/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExecutionSummary,
    ExecutionSummaryFromJSON,
    ExecutionSummaryFromJSONTyped,
    ExecutionSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface ActorExecutionSummaries
 */
export interface ActorExecutionSummaries {
    /**
     * the id of the actor
     * @type {string}
     * @memberof ActorExecutionSummaries
     */
    actorId?: string;
    /**
     * the base URL for this Abaco instance.
     * @type {string}
     * @memberof ActorExecutionSummaries
     */
    apiServer?: string;
    /**
     * The user who owns the associated actor.
     * @type {string}
     * @memberof ActorExecutionSummaries
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof ActorExecutionSummaries
     */
    totalCpu?: number;
    /**
     * 
     * @type {number}
     * @memberof ActorExecutionSummaries
     */
    totalExecutions?: number;
    /**
     * 
     * @type {number}
     * @memberof ActorExecutionSummaries
     */
    totalIo?: number;
    /**
     * 
     * @type {number}
     * @memberof ActorExecutionSummaries
     */
    totalRuntime?: number;
    /**
     * 
     * @type {Array<ExecutionSummary>}
     * @memberof ActorExecutionSummaries
     */
    executions?: Array<ExecutionSummary>;
}

export function ActorExecutionSummariesFromJSON(json: any): ActorExecutionSummaries {
    return ActorExecutionSummariesFromJSONTyped(json, false);
}

export function ActorExecutionSummariesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorExecutionSummaries {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actorId': !exists(json, 'actorId') ? undefined : json['actorId'],
        'apiServer': !exists(json, 'apiServer') ? undefined : json['apiServer'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'totalCpu': !exists(json, 'totalCpu') ? undefined : json['totalCpu'],
        'totalExecutions': !exists(json, 'totalExecutions') ? undefined : json['totalExecutions'],
        'totalIo': !exists(json, 'totalIo') ? undefined : json['totalIo'],
        'totalRuntime': !exists(json, 'totalRuntime') ? undefined : json['totalRuntime'],
        'executions': !exists(json, 'executions') ? undefined : ((json['executions'] as Array<any>).map(ExecutionSummaryFromJSON)),
    };
}

export function ActorExecutionSummariesToJSON(value?: ActorExecutionSummaries | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actorId': value.actorId,
        'apiServer': value.apiServer,
        'owner': value.owner,
        'totalCpu': value.totalCpu,
        'totalExecutions': value.totalExecutions,
        'totalIo': value.totalIo,
        'totalRuntime': value.totalRuntime,
        'executions': value.executions === undefined ? undefined : ((value.executions as Array<any>).map(ExecutionSummaryToJSON)),
    };
}


