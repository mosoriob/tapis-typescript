/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BinaryMessage,
    BinaryMessageFromJSON,
    BinaryMessageToJSON,
    JSONMessage,
    JSONMessageFromJSON,
    JSONMessageToJSON,
    RespdeletePendingMessages,
    RespdeletePendingMessagesFromJSON,
    RespdeletePendingMessagesToJSON,
    RespgetMessages,
    RespgetMessagesFromJSON,
    RespgetMessagesToJSON,
    RespsendBinaryMessage,
    RespsendBinaryMessageFromJSON,
    RespsendBinaryMessageToJSON,
    RespsendJSONMessage,
    RespsendJSONMessageFromJSON,
    RespsendJSONMessageToJSON,
    RespsendMessage,
    RespsendMessageFromJSON,
    RespsendMessageToJSON,
} from '../models';

export interface DeletePendingMessagesRequest {
    actorId: string;
}

export interface GetMessagesRequest {
    actorId: string;
}

export interface SendBinaryMessageRequest {
    actorId: string;
    binaryMessage: BinaryMessage;
    abacoSynchronous?: SendBinaryMessageAbacoSynchronousEnum;
}

export interface SendJSONMessageRequest {
    actorId: string;
    jSONMessage: JSONMessage;
    abacoSynchronous?: SendJSONMessageAbacoSynchronousEnum;
}

export interface SendMessageRequest {
    actorId: string;
    jSONMessage: JSONMessage;
    abacoSynchronous?: SendMessageAbacoSynchronousEnum;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Delete all pending messages actor\'s inbox.
     * deletePendingMessages
     */
    async deletePendingMessagesRaw(requestParameters: DeletePendingMessagesRequest): Promise<runtime.ApiResponse<RespdeletePendingMessages>> {
        if (requestParameters.actorId === null || requestParameters.actorId === undefined) {
            throw new runtime.RequiredError('actorId','Required parameter requestParameters.actorId was null or undefined when calling deletePendingMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/{actor_id}/messages`.replace(`{${"actor_id"}}`, encodeURIComponent(String(requestParameters.actorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespdeletePendingMessagesFromJSON(jsonValue));
    }

    /**
     * Delete all pending messages actor\'s inbox.
     * deletePendingMessages
     */
    async deletePendingMessages(requestParameters: DeletePendingMessagesRequest): Promise<RespdeletePendingMessages> {
        const response = await this.deletePendingMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get number of pending messages for an actor.
     * getMessages
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest): Promise<runtime.ApiResponse<RespgetMessages>> {
        if (requestParameters.actorId === null || requestParameters.actorId === undefined) {
            throw new runtime.RequiredError('actorId','Required parameter requestParameters.actorId was null or undefined when calling getMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/{actor_id}/messages`.replace(`{${"actor_id"}}`, encodeURIComponent(String(requestParameters.actorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespgetMessagesFromJSON(jsonValue));
    }

    /**
     * Get number of pending messages for an actor.
     * getMessages
     */
    async getMessages(requestParameters: GetMessagesRequest): Promise<RespgetMessages> {
        const response = await this.getMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send an actor a binary message
     * sendBinaryMessage
     */
    async sendBinaryMessageRaw(requestParameters: SendBinaryMessageRequest): Promise<runtime.ApiResponse<RespsendBinaryMessage>> {
        if (requestParameters.actorId === null || requestParameters.actorId === undefined) {
            throw new runtime.RequiredError('actorId','Required parameter requestParameters.actorId was null or undefined when calling sendBinaryMessage.');
        }

        if (requestParameters.binaryMessage === null || requestParameters.binaryMessage === undefined) {
            throw new runtime.RequiredError('binaryMessage','Required parameter requestParameters.binaryMessage was null or undefined when calling sendBinaryMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.abacoSynchronous !== undefined) {
            queryParameters['_abaco_synchronous'] = requestParameters.abacoSynchronous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/actors/{actor_id}//messages`.replace(`{${"actor_id"}}`, encodeURIComponent(String(requestParameters.actorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BinaryMessageToJSON(requestParameters.binaryMessage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespsendBinaryMessageFromJSON(jsonValue));
    }

    /**
     * Send an actor a binary message
     * sendBinaryMessage
     */
    async sendBinaryMessage(requestParameters: SendBinaryMessageRequest): Promise<RespsendBinaryMessage> {
        const response = await this.sendBinaryMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send an actor a JSON message
     * sendJSONMessage
     */
    async sendJSONMessageRaw(requestParameters: SendJSONMessageRequest): Promise<runtime.ApiResponse<RespsendJSONMessage>> {
        if (requestParameters.actorId === null || requestParameters.actorId === undefined) {
            throw new runtime.RequiredError('actorId','Required parameter requestParameters.actorId was null or undefined when calling sendJSONMessage.');
        }

        if (requestParameters.jSONMessage === null || requestParameters.jSONMessage === undefined) {
            throw new runtime.RequiredError('jSONMessage','Required parameter requestParameters.jSONMessage was null or undefined when calling sendJSONMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.abacoSynchronous !== undefined) {
            queryParameters['_abaco_synchronous'] = requestParameters.abacoSynchronous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/actors/{actor_id}///messages`.replace(`{${"actor_id"}}`, encodeURIComponent(String(requestParameters.actorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JSONMessageToJSON(requestParameters.jSONMessage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespsendJSONMessageFromJSON(jsonValue));
    }

    /**
     * Send an actor a JSON message
     * sendJSONMessage
     */
    async sendJSONMessage(requestParameters: SendJSONMessageRequest): Promise<RespsendJSONMessage> {
        const response = await this.sendJSONMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send an actor a message
     * sendMessage
     */
    async sendMessageRaw(requestParameters: SendMessageRequest): Promise<runtime.ApiResponse<RespsendMessage>> {
        if (requestParameters.actorId === null || requestParameters.actorId === undefined) {
            throw new runtime.RequiredError('actorId','Required parameter requestParameters.actorId was null or undefined when calling sendMessage.');
        }

        if (requestParameters.jSONMessage === null || requestParameters.jSONMessage === undefined) {
            throw new runtime.RequiredError('jSONMessage','Required parameter requestParameters.jSONMessage was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.abacoSynchronous !== undefined) {
            queryParameters['_abaco_synchronous'] = requestParameters.abacoSynchronous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/{actor_id}/messages`.replace(`{${"actor_id"}}`, encodeURIComponent(String(requestParameters.actorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JSONMessageToJSON(requestParameters.jSONMessage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespsendMessageFromJSON(jsonValue));
    }

    /**
     * Send an actor a message
     * sendMessage
     */
    async sendMessage(requestParameters: SendMessageRequest): Promise<RespsendMessage> {
        const response = await this.sendMessageRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SendBinaryMessageAbacoSynchronousEnum {
    True = 'true',
    False = 'false'
}
/**
    * @export
    * @enum {string}
    */
export enum SendJSONMessageAbacoSynchronousEnum {
    True = 'true',
    False = 'false'
}
/**
    * @export
    * @enum {string}
    */
export enum SendMessageAbacoSynchronousEnum {
    True = 'true',
    False = 'false'
}
