/* tslint:disable */
/* eslint-disable */
/**
 * Abaco API
 * Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqCreateAlias,
    ReqCreateAliasFromJSON,
    ReqCreateAliasToJSON,
    RespCreateAlias,
    RespCreateAliasFromJSON,
    RespCreateAliasToJSON,
    RespDeleteAlias,
    RespDeleteAliasFromJSON,
    RespDeleteAliasToJSON,
    RespGetAlias,
    RespGetAliasFromJSON,
    RespGetAliasToJSON,
    RespListAliases,
    RespListAliasesFromJSON,
    RespListAliasesToJSON,
    RespUpdateActorAlias,
    RespUpdateActorAliasFromJSON,
    RespUpdateActorAliasToJSON,
} from '../models';

export interface CreateAliasRequest {
    reqCreateAlias: ReqCreateAlias;
}

export interface DeleteAliasRequest {
    alias: string;
}

export interface GetAliasRequest {
    alias: string;
}

export interface ListAliasesRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateActorAliasRequest {
    alias: string;
    reqCreateAlias: ReqCreateAlias;
}

/**
 * 
 */
export class AliasesApi extends runtime.BaseAPI {

    /**
     * Register an actor alias
     * create_alias
     */
    async createAliasRaw(requestParameters: CreateAliasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespCreateAlias>> {
        if (requestParameters.reqCreateAlias === null || requestParameters.reqCreateAlias === undefined) {
            throw new runtime.RequiredError('reqCreateAlias','Required parameter requestParameters.reqCreateAlias was null or undefined when calling createAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/aliases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateAliasToJSON(requestParameters.reqCreateAlias),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateAliasFromJSON(jsonValue));
    }

    /**
     * Register an actor alias
     * create_alias
     */
    async createAlias(requestParameters: CreateAliasRequest, initOverrides?: RequestInit): Promise<RespCreateAlias> {
        const response = await this.createAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permenantly delete an actor alias.
     * delete_alias
     */
    async deleteAliasRaw(requestParameters: DeleteAliasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDeleteAlias>> {
        if (requestParameters.alias === null || requestParameters.alias === undefined) {
            throw new runtime.RequiredError('alias','Required parameter requestParameters.alias was null or undefined when calling deleteAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/aliases/{alias}`.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters.alias))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteAliasFromJSON(jsonValue));
    }

    /**
     * Permenantly delete an actor alias.
     * delete_alias
     */
    async deleteAlias(requestParameters: DeleteAliasRequest, initOverrides?: RequestInit): Promise<RespDeleteAlias> {
        const response = await this.deleteAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific actor alias.
     * get_alias
     */
    async getAliasRaw(requestParameters: GetAliasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetAlias>> {
        if (requestParameters.alias === null || requestParameters.alias === undefined) {
            throw new runtime.RequiredError('alias','Required parameter requestParameters.alias was null or undefined when calling getAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/aliases/{alias}`.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters.alias))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetAliasFromJSON(jsonValue));
    }

    /**
     * Get details of a specific actor alias.
     * get_alias
     */
    async getAlias(requestParameters: GetAliasRequest, initOverrides?: RequestInit): Promise<RespGetAlias> {
        const response = await this.getAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all actor aliases available to user
     * list_aliases
     */
    async listAliasesRaw(requestParameters: ListAliasesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespListAliases>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/aliases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListAliasesFromJSON(jsonValue));
    }

    /**
     * List all actor aliases available to user
     * list_aliases
     */
    async listAliases(requestParameters: ListAliasesRequest, initOverrides?: RequestInit): Promise<RespListAliases> {
        const response = await this.listAliasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an alias definition.
     * update_actor_alias
     */
    async updateActorAliasRaw(requestParameters: UpdateActorAliasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespUpdateActorAlias>> {
        if (requestParameters.alias === null || requestParameters.alias === undefined) {
            throw new runtime.RequiredError('alias','Required parameter requestParameters.alias was null or undefined when calling updateActorAlias.');
        }

        if (requestParameters.reqCreateAlias === null || requestParameters.reqCreateAlias === undefined) {
            throw new runtime.RequiredError('reqCreateAlias','Required parameter requestParameters.reqCreateAlias was null or undefined when calling updateActorAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x-nonce"] = this.configuration.apiKey("x-nonce"); // nonce authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-JWT-Assertion-DEV"] = this.configuration.apiKey("X-JWT-Assertion-DEV"); // wso2jwtDevAuth authentication
        }

        const response = await this.request({
            path: `/v3/actors/aliases/{alias}`.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters.alias))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateAliasToJSON(requestParameters.reqCreateAlias),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateActorAliasFromJSON(jsonValue));
    }

    /**
     * Update an alias definition.
     * update_actor_alias
     */
    async updateActorAlias(requestParameters: UpdateActorAliasRequest, initOverrides?: RequestInit): Promise<RespUpdateActorAlias> {
        const response = await this.updateActorAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
