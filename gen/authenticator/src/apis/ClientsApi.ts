/* tslint:disable */
/* eslint-disable */
/**
 * Authenticator
 * REST API and web server providing authentication for a Tapis v3 instance.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BasicResponse,
    BasicResponseFromJSON,
    BasicResponseToJSON,
    ReqCreateClient,
    ReqCreateClientFromJSON,
    ReqCreateClientToJSON,
} from '../models';

export interface CreateClientRequest {
    reqCreateClient: ReqCreateClient;
}

export interface DeleteClientRequest {
    clientId: string;
}

export interface GetClientRequest {
    clientId: string;
}

export interface ListClientsRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     */
    async createClientRaw(requestParameters: CreateClientRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.reqCreateClient === null || requestParameters.reqCreateClient === undefined) {
            throw new runtime.RequiredError('reqCreateClient','Required parameter requestParameters.reqCreateClient was null or undefined when calling createClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/oauth2/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateClientToJSON(requestParameters.reqCreateClient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     */
    async createClient(requestParameters: CreateClientRequest): Promise<BasicResponse> {
        const response = await this.createClientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete a client.
     * Delete a tenant
     */
    async deleteClientRaw(requestParameters: DeleteClientRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling deleteClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/oauth2/clients/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Permenantly delete a client.
     * Delete a tenant
     */
    async deleteClient(requestParameters: DeleteClientRequest): Promise<BasicResponse> {
        const response = await this.deleteClientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific client by its id.
     * Get client details
     */
    async getClientRaw(requestParameters: GetClientRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling getClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/oauth2/clients/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Get details of a specific client by its id.
     * Get client details
     */
    async getClient(requestParameters: GetClientRequest): Promise<BasicResponse> {
        const response = await this.getClientRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listClientsRaw(requestParameters: ListClientsRequest): Promise<runtime.ApiResponse<BasicResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/oauth2/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     */
    async listClients(requestParameters: ListClientsRequest): Promise<BasicResponse> {
        const response = await this.listClientsRaw(requestParameters);
        return await response.value();
    }

}
