/* tslint:disable */
/* eslint-disable */
/**
 * Tenants API
 * Manage Tapis Tenants.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LDAP
 */
export interface LDAP {
    /**
     * Unique id for the LDAP object.
     * @type {string}
     * @memberof LDAP
     */
    ldap_id?: string;
    /**
     * url to the LDAP
     * @type {string}
     * @memberof LDAP
     */
    url?: string;
    /**
     * port for the LDAP
     * @type {number}
     * @memberof LDAP
     */
    port?: number;
    /**
     * Whether to use SSL with the LDAP
     * @type {boolean}
     * @memberof LDAP
     */
    use_ssl?: boolean;
    /**
     * base DN for users
     * @type {string}
     * @memberof LDAP
     */
    user_dn?: string;
    /**
     * DN used for binding to the LDAP.
     * @type {string}
     * @memberof LDAP
     */
    bind_dn?: string;
    /**
     * Pointed to a Tapis credential for binding to the LDAP.
     * @type {string}
     * @memberof LDAP
     */
    bind_credential?: string;
    /**
     * Whether this LDAP is used for service accounts or user accounts.
     * @type {string}
     * @memberof LDAP
     */
    account_type?: LDAPAccountTypeEnum;
    /**
     * The time the client was created.
     * @type {string}
     * @memberof LDAP
     */
    create_time?: string;
    /**
     * The time the client was last updated.
     * @type {string}
     * @memberof LDAP
     */
    last_update_time?: string;
}

/**
* @export
* @enum {string}
*/
export enum LDAPAccountTypeEnum {
    Service = 'service',
    User = 'user'
}

export function LDAPFromJSON(json: any): LDAP {
    return LDAPFromJSONTyped(json, false);
}

export function LDAPFromJSONTyped(json: any, ignoreDiscriminator: boolean): LDAP {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ldap_id': !exists(json, 'ldap_id') ? undefined : json['ldap_id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'port': !exists(json, 'port') ? undefined : json['port'],
        'use_ssl': !exists(json, 'use_ssl') ? undefined : json['use_ssl'],
        'user_dn': !exists(json, 'user_dn') ? undefined : json['user_dn'],
        'bind_dn': !exists(json, 'bind_dn') ? undefined : json['bind_dn'],
        'bind_credential': !exists(json, 'bind_credential') ? undefined : json['bind_credential'],
        'account_type': !exists(json, 'account_type') ? undefined : json['account_type'],
        'create_time': !exists(json, 'create_time') ? undefined : json['create_time'],
        'last_update_time': !exists(json, 'last_update_time') ? undefined : json['last_update_time'],
    };
}

export function LDAPToJSON(value?: LDAP | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ldap_id': value.ldap_id,
        'url': value.url,
        'port': value.port,
        'use_ssl': value.use_ssl,
        'user_dn': value.user_dn,
        'bind_dn': value.bind_dn,
        'bind_credential': value.bind_credential,
        'account_type': value.account_type,
        'create_time': value.create_time,
        'last_update_time': value.last_update_time,
    };
}


