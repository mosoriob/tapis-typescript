/* tslint:disable */
/* eslint-disable */
/**
 * Tenants API
 * Manage Tapis Tenants.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Owner,
    OwnerFromJSON,
    OwnerToJSON,
    ReqCreateLdap,
    ReqCreateLdapFromJSON,
    ReqCreateLdapToJSON,
    ReqCreateTenant,
    ReqCreateTenantFromJSON,
    ReqCreateTenantToJSON,
    RespCreateLdap,
    RespCreateLdapFromJSON,
    RespCreateLdapToJSON,
    RespCreateOwner,
    RespCreateOwnerFromJSON,
    RespCreateOwnerToJSON,
    RespCreateTenant,
    RespCreateTenantFromJSON,
    RespCreateTenantToJSON,
    RespDeleteLdap,
    RespDeleteLdapFromJSON,
    RespDeleteLdapToJSON,
    RespDeleteOwner,
    RespDeleteOwnerFromJSON,
    RespDeleteOwnerToJSON,
    RespDeleteTenant,
    RespDeleteTenantFromJSON,
    RespDeleteTenantToJSON,
    RespGetLdap,
    RespGetLdapFromJSON,
    RespGetLdapToJSON,
    RespGetOwner,
    RespGetOwnerFromJSON,
    RespGetOwnerToJSON,
    RespGetTenant,
    RespGetTenantFromJSON,
    RespGetTenantToJSON,
    RespListLdaps,
    RespListLdapsFromJSON,
    RespListLdapsToJSON,
    RespListOwners,
    RespListOwnersFromJSON,
    RespListOwnersToJSON,
    RespListTenants,
    RespListTenantsFromJSON,
    RespListTenantsToJSON,
} from '../models';

export interface CreateLdapRequest {
    reqCreateLdap: ReqCreateLdap;
}

export interface CreateOwnerRequest {
    owner: Owner;
}

export interface CreateTenantRequest {
    reqCreateTenant: ReqCreateTenant;
}

export interface DeleteLdapRequest {
    ldapId: string;
}

export interface DeleteOwnerRequest {
    email: string;
}

export interface DeleteTenantRequest {
    tenantId: string;
}

export interface GetLdapRequest {
    ldapId: string;
}

export interface GetOwnerRequest {
    email: string;
}

export interface GetTenantRequest {
    tenantId: string;
}

export interface ListLdapsRequest {
    limit?: number;
    offset?: number;
}

export interface ListOwnersRequest {
    limit?: number;
    offset?: number;
}

export interface ListTenantsRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI {

    /**
     * Create an ldap
     * Create an ldap
     */
    async createLdapRaw(requestParameters: CreateLdapRequest): Promise<runtime.ApiResponse<RespCreateLdap>> {
        if (requestParameters.reqCreateLdap === null || requestParameters.reqCreateLdap === undefined) {
            throw new runtime.RequiredError('reqCreateLdap','Required parameter requestParameters.reqCreateLdap was null or undefined when calling createLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tenants/ldaps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateLdapToJSON(requestParameters.reqCreateLdap),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateLdapFromJSON(jsonValue));
    }

    /**
     * Create an ldap
     * Create an ldap
     */
    async createLdap(requestParameters: CreateLdapRequest): Promise<RespCreateLdap> {
        const response = await this.createLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create an owner
     * Create an owner
     */
    async createOwnerRaw(requestParameters: CreateOwnerRequest): Promise<runtime.ApiResponse<RespCreateOwner>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling createOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tenants/owners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OwnerToJSON(requestParameters.owner),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateOwnerFromJSON(jsonValue));
    }

    /**
     * Create an owner
     * Create an owner
     */
    async createOwner(requestParameters: CreateOwnerRequest): Promise<RespCreateOwner> {
        const response = await this.createOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a tenant.
     * Create a tenant.
     */
    async createTenantRaw(requestParameters: CreateTenantRequest): Promise<runtime.ApiResponse<RespCreateTenant>> {
        if (requestParameters.reqCreateTenant === null || requestParameters.reqCreateTenant === undefined) {
            throw new runtime.RequiredError('reqCreateTenant','Required parameter requestParameters.reqCreateTenant was null or undefined when calling createTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateTenantToJSON(requestParameters.reqCreateTenant),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateTenantFromJSON(jsonValue));
    }

    /**
     * Create a tenant.
     * Create a tenant.
     */
    async createTenant(requestParameters: CreateTenantRequest): Promise<RespCreateTenant> {
        const response = await this.createTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete an ldap.
     * Delete ldap
     */
    async deleteLdapRaw(requestParameters: DeleteLdapRequest): Promise<runtime.ApiResponse<RespDeleteLdap>> {
        if (requestParameters.ldapId === null || requestParameters.ldapId === undefined) {
            throw new runtime.RequiredError('ldapId','Required parameter requestParameters.ldapId was null or undefined when calling deleteLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps/{ldap_id}`.replace(`{${"ldap_id"}}`, encodeURIComponent(String(requestParameters.ldapId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteLdapFromJSON(jsonValue));
    }

    /**
     * Permenantly delete an ldap.
     * Delete ldap
     */
    async deleteLdap(requestParameters: DeleteLdapRequest): Promise<RespDeleteLdap> {
        const response = await this.deleteLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete an owner.
     * Delete owner
     */
    async deleteOwnerRaw(requestParameters: DeleteOwnerRequest): Promise<runtime.ApiResponse<RespDeleteOwner>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling deleteOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteOwnerFromJSON(jsonValue));
    }

    /**
     * Permenantly delete an owner.
     * Delete owner
     */
    async deleteOwner(requestParameters: DeleteOwnerRequest): Promise<RespDeleteOwner> {
        const response = await this.deleteOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permenantly delete a tenant.
     * Delete a tenant
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest): Promise<runtime.ApiResponse<RespDeleteTenant>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling deleteTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/{tenant_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteTenantFromJSON(jsonValue));
    }

    /**
     * Permenantly delete a tenant.
     * Delete a tenant
     */
    async deleteTenant(requestParameters: DeleteTenantRequest): Promise<RespDeleteTenant> {
        const response = await this.deleteTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific ldap by its id.
     * Get ldap details
     */
    async getLdapRaw(requestParameters: GetLdapRequest): Promise<runtime.ApiResponse<RespGetLdap>> {
        if (requestParameters.ldapId === null || requestParameters.ldapId === undefined) {
            throw new runtime.RequiredError('ldapId','Required parameter requestParameters.ldapId was null or undefined when calling getLdap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps/{ldap_id}`.replace(`{${"ldap_id"}}`, encodeURIComponent(String(requestParameters.ldapId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetLdapFromJSON(jsonValue));
    }

    /**
     * Get details of a specific ldap by its id.
     * Get ldap details
     */
    async getLdap(requestParameters: GetLdapRequest): Promise<RespGetLdap> {
        const response = await this.getLdapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific owner by its email address.
     * Get owner details
     */
    async getOwnerRaw(requestParameters: GetOwnerRequest): Promise<runtime.ApiResponse<RespGetOwner>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetOwnerFromJSON(jsonValue));
    }

    /**
     * Get details of a specific owner by its email address.
     * Get owner details
     */
    async getOwner(requestParameters: GetOwnerRequest): Promise<RespGetOwner> {
        const response = await this.getOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a specific tenant by its id.
     * Get tenant details
     */
    async getTenantRaw(requestParameters: GetTenantRequest): Promise<runtime.ApiResponse<RespGetTenant>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling getTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/{tenant_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetTenantFromJSON(jsonValue));
    }

    /**
     * Get details of a specific tenant by its id.
     * Get tenant details
     */
    async getTenant(requestParameters: GetTenantRequest): Promise<RespGetTenant> {
        const response = await this.getTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     * List ldaps
     * List ldaps
     */
    async listLdapsRaw(requestParameters: ListLdapsRequest): Promise<runtime.ApiResponse<RespListLdaps>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/ldaps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListLdapsFromJSON(jsonValue));
    }

    /**
     * List ldaps
     * List ldaps
     */
    async listLdaps(requestParameters: ListLdapsRequest): Promise<RespListLdaps> {
        const response = await this.listLdapsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List owners
     * List owners
     */
    async listOwnersRaw(requestParameters: ListOwnersRequest): Promise<runtime.ApiResponse<RespListOwners>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants/owners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListOwnersFromJSON(jsonValue));
    }

    /**
     * List owners
     * List owners
     */
    async listOwners(requestParameters: ListOwnersRequest): Promise<RespListOwners> {
        const response = await this.listOwnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * List tenants.
     * List tenants.
     */
    async listTenantsRaw(requestParameters: ListTenantsRequest): Promise<runtime.ApiResponse<RespListTenants>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListTenantsFromJSON(jsonValue));
    }

    /**
     * List tenants.
     * List tenants.
     */
    async listTenants(requestParameters: ListTenantsRequest): Promise<RespListTenants> {
        const response = await this.listTenantsRaw(requestParameters);
        return await response.value();
    }

}
