/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Notifications API
 * The Tapis Notifications API provides for management of subscriptions and event publication
 *
 * The version of the OpenAPI document: 1.6.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
} from '../models';

export interface PostEventRequest {
    event: Event;
    tenant?: string;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Publish an event to be distributed to all subscribers. Only services may publish events.  The attributes *source*, *type* and *timestamp* are required. Note that certain attributes, marked in *italics* in the list below, are allowed but ignored. These attributes are maintained by Tapis. They are present when the event is part of a delivered notification.  Event attributes:   - source: Context in which event happened: Examples: *Jobs*, *Systems*.   - type: Type of event. Used for routing notifications. A series of 3 fields separated by the dot character. Pattern is *service.category.detail*. Examples: *jobs.new_status.complete*, *systems.system.create*, *files.object.delete*   - subject: Subject of event in the context of the service. Examples: job Id, system Id, file path, role name, etc.   - timestamp: When the event happened.   - data: Optional additional information associated with the event. Data specific to the service associated with the event.   - deleteSubscriptionsMatchingSubject: Boolean indicating that all subscriptions whose *subjectFilter* matches the *subject* of the event should be deleted once all notifications are delivered.   - seriesId: Optional Id that may be used to group events from the same tenant, source and subject. In a series, event order is preserved when sending out notifications.   - *tenant*: Tapis tenant associated with the event.   - *uuid*: Tapis generated unique identifier.   - *user*: Tapis user associated with the event.  Note that events are not persisted by the front end api service. When received they are simply sent to a message broker. The back end dispatch service will persist events temporarily in order to support recovery.  An event is delivered to the delivery target in a Notification object. Notification attributes:   - uuid: Unique identifier for the notification.   - subscriptionName: Name of subscription associated with the event.   - event: All information contained in the event.   - eventUuid: Unique identifier for the event.   - tenant: tenant associated with the event.   - deliveryTarget: the delivery target   - created: When the notification was created.  For details on the schema for a Notification object, please see the request body specification included under the endpoint for *recordTestNotification*, at path *_/v3/notifications/test/callback/{name}*  Note that certain attributes in the request body (such as tenant) are allowed but ignored. These attributes are maintained by Tapis. They are present when the event is part of a delivered notification. The attributes that are allowed but ignored are    - tenant   - uuid   - user 
     */
    async postEventRaw(requestParameters: PostEventRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.event === null || requestParameters.event === undefined) {
            throw new runtime.RequiredError('event','Required parameter requestParameters.event was null or undefined when calling postEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.tenant !== undefined) {
            queryParameters['tenant'] = requestParameters.tenant;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/notifications/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Publish an event to be distributed to all subscribers. Only services may publish events.  The attributes *source*, *type* and *timestamp* are required. Note that certain attributes, marked in *italics* in the list below, are allowed but ignored. These attributes are maintained by Tapis. They are present when the event is part of a delivered notification.  Event attributes:   - source: Context in which event happened: Examples: *Jobs*, *Systems*.   - type: Type of event. Used for routing notifications. A series of 3 fields separated by the dot character. Pattern is *service.category.detail*. Examples: *jobs.new_status.complete*, *systems.system.create*, *files.object.delete*   - subject: Subject of event in the context of the service. Examples: job Id, system Id, file path, role name, etc.   - timestamp: When the event happened.   - data: Optional additional information associated with the event. Data specific to the service associated with the event.   - deleteSubscriptionsMatchingSubject: Boolean indicating that all subscriptions whose *subjectFilter* matches the *subject* of the event should be deleted once all notifications are delivered.   - seriesId: Optional Id that may be used to group events from the same tenant, source and subject. In a series, event order is preserved when sending out notifications.   - *tenant*: Tapis tenant associated with the event.   - *uuid*: Tapis generated unique identifier.   - *user*: Tapis user associated with the event.  Note that events are not persisted by the front end api service. When received they are simply sent to a message broker. The back end dispatch service will persist events temporarily in order to support recovery.  An event is delivered to the delivery target in a Notification object. Notification attributes:   - uuid: Unique identifier for the notification.   - subscriptionName: Name of subscription associated with the event.   - event: All information contained in the event.   - eventUuid: Unique identifier for the event.   - tenant: tenant associated with the event.   - deliveryTarget: the delivery target   - created: When the notification was created.  For details on the schema for a Notification object, please see the request body specification included under the endpoint for *recordTestNotification*, at path *_/v3/notifications/test/callback/{name}*  Note that certain attributes in the request body (such as tenant) are allowed but ignored. These attributes are maintained by Tapis. They are present when the event is part of a delivered notification. The attributes that are allowed but ignored are    - tenant   - uuid   - user 
     */
    async postEvent(requestParameters: PostEventRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.postEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
