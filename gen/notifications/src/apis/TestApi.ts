/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Notifications API
 * The Tapis Notifications API provides for management of subscriptions and event publication
 *
 * The version of the OpenAPI document: 1.6.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Notification,
    NotificationFromJSON,
    NotificationToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespChangeCount,
    RespChangeCountFromJSON,
    RespChangeCountToJSON,
    RespSubscription,
    RespSubscriptionFromJSON,
    RespSubscriptionToJSON,
    RespTestSequence,
    RespTestSequenceFromJSON,
    RespTestSequenceToJSON,
} from '../models';

export interface BeginTestSequenceRequest {
    subscriptionTTL?: number;
    body?: object;
}

export interface DeleteTestSequenceRequest {
    name: string;
}

export interface GetTestSequenceRequest {
    name: string;
}

export interface RecordTestNotificationRequest {
    name: string;
    notification: Notification;
}

/**
 * 
 */
export class TestApi extends runtime.BaseAPI {

    /**
     * Start a test sequence by creating a subscription and publishing an initial event matching the subscription. Only services may perform this operation.  The subscription will have the following properties:   - owner: *api_user*   - name: *subscription_uuid*   - typeFilter: notifications.test.*   - subjectFilter: *subscription_uuid*   - deliveryTarget:     - deliveryMethod: WEBHOOK     - deliveryAddress: *tenant_base_url*_/v3/notifications/test/callback/_*subscription_uuid*   - ttlMinutes: 60  The default TTL of 1 hour may be overridden using the query parameter *subscriptionTTL*.  The initial event will have the following properties:   - source: *tenant_base_url*_/v3/notifications/test   - type: notifications.test.begin   - subject: *subscription_uuid*   - seriesId: *subscription_uuid*  The initial event will be published to the main queue and the subscription will be returned to the caller. The sequence of test events may be continued by publishing events that match the test subscription. Results will be recorded when notifications associated with the test are received via the callback. The first notification should be recorded shortly after the initial event is published. 
     */
    async beginTestSequenceRaw(requestParameters: BeginTestSequenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSubscription>> {
        const queryParameters: any = {};

        if (requestParameters.subscriptionTTL !== undefined) {
            queryParameters['subscriptionTTL'] = requestParameters.subscriptionTTL;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/notifications/test/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubscriptionFromJSON(jsonValue));
    }

    /**
     * Start a test sequence by creating a subscription and publishing an initial event matching the subscription. Only services may perform this operation.  The subscription will have the following properties:   - owner: *api_user*   - name: *subscription_uuid*   - typeFilter: notifications.test.*   - subjectFilter: *subscription_uuid*   - deliveryTarget:     - deliveryMethod: WEBHOOK     - deliveryAddress: *tenant_base_url*_/v3/notifications/test/callback/_*subscription_uuid*   - ttlMinutes: 60  The default TTL of 1 hour may be overridden using the query parameter *subscriptionTTL*.  The initial event will have the following properties:   - source: *tenant_base_url*_/v3/notifications/test   - type: notifications.test.begin   - subject: *subscription_uuid*   - seriesId: *subscription_uuid*  The initial event will be published to the main queue and the subscription will be returned to the caller. The sequence of test events may be continued by publishing events that match the test subscription. Results will be recorded when notifications associated with the test are received via the callback. The first notification should be recorded shortly after the initial event is published. 
     */
    async beginTestSequence(requestParameters: BeginTestSequenceRequest, initOverrides?: RequestInit): Promise<RespSubscription> {
        const response = await this.beginTestSequenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete all test sequence artifacts including the subscription and results. Only services may perform this operation. 
     */
    async deleteTestSequenceRaw(requestParameters: DeleteTestSequenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteTestSequence.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/notifications/test/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Delete all test sequence artifacts including the subscription and results. Only services may perform this operation. 
     */
    async deleteTestSequence(requestParameters: DeleteTestSequenceRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.deleteTestSequenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve status and result history for a test sequence created using the endpoint *test/begin*. 
     */
    async getTestSequenceRaw(requestParameters: GetTestSequenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespTestSequence>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getTestSequence.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/notifications/test/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespTestSequenceFromJSON(jsonValue));
    }

    /**
     * Retrieve status and result history for a test sequence created using the endpoint *test/begin*. 
     */
    async getTestSequence(requestParameters: GetTestSequenceRequest, initOverrides?: RequestInit): Promise<RespTestSequence> {
        const response = await this.getTestSequenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Callback endpoint for receiving a notification associated with a test sequence. Results will be recorded when notifications associated with the test are received via the callback. 
     */
    async recordTestNotificationRaw(requestParameters: RecordTestNotificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling recordTestNotification.');
        }

        if (requestParameters.notification === null || requestParameters.notification === undefined) {
            throw new runtime.RequiredError('notification','Required parameter requestParameters.notification was null or undefined when calling recordTestNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/notifications/test/callback/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationToJSON(requestParameters.notification),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Callback endpoint for receiving a notification associated with a test sequence. Results will be recorded when notifications associated with the test are received via the callback. 
     */
    async recordTestNotification(requestParameters: RecordTestNotificationRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.recordTestNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
