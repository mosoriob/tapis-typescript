/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Notifications API
 * The Tapis Notifications API provides for management of subscriptions and event publication
 *
 * The version of the OpenAPI document: 1.6.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Event,
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
    TapisSubscription,
    TapisSubscriptionFromJSON,
    TapisSubscriptionFromJSONTyped,
    TapisSubscriptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface TestSequence
 */
export interface TestSequence {
    /**
     * 
     * @type {string}
     * @memberof TestSequence
     */
    tenant?: string;
    /**
     * 
     * @type {TapisSubscription}
     * @memberof TestSequence
     */
    subscription?: TapisSubscription;
    /**
     * 
     * @type {Array<Event>}
     * @memberof TestSequence
     */
    receivedEvents?: Array<Event>;
}

export function TestSequenceFromJSON(json: any): TestSequence {
    return TestSequenceFromJSONTyped(json, false);
}

export function TestSequenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestSequence {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'subscription': !exists(json, 'subscription') ? undefined : TapisSubscriptionFromJSON(json['subscription']),
        'receivedEvents': !exists(json, 'receivedEvents') ? undefined : ((json['receivedEvents'] as Array<any>).map(EventFromJSON)),
    };
}

export function TestSequenceToJSON(value?: TestSequence | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tenant': value.tenant,
        'subscription': TapisSubscriptionToJSON(value.subscription),
        'receivedEvents': value.receivedEvents === undefined ? undefined : ((value.receivedEvents as Array<any>).map(EventToJSON)),
    };
}

