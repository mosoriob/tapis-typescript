/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TapisResponse,
    TapisResponseFromJSON,
    TapisResponseToJSON,
    TransferTaskRequest,
    TransferTaskRequestFromJSON,
    TransferTaskRequestToJSON,
    TransferTaskResponse,
    TransferTaskResponseFromJSON,
    TransferTaskResponseToJSON,
} from '../models';

export interface CancelTransferTaskRequest {
    transferTaskId: string;
}

export interface CreateTransferTaskRequest {
    transferTaskRequest: TransferTaskRequest;
}

export interface GetTransferTaskRequest {
    transferTaskId: string;
}

export interface GetTransferTaskHistoryRequest {
    transferTaskId: string;
}

/**
 * 
 */
export class TransfersApi extends runtime.BaseAPI {

    /**
     * Stop/Cancel a transfer task
     */
    async cancelTransferTaskRaw(requestParameters: CancelTransferTaskRequest): Promise<runtime.ApiResponse<TapisResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling cancelTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TapisResponseFromJSON(jsonValue));
    }

    /**
     * Stop/Cancel a transfer task
     */
    async cancelTransferTask(requestParameters: CancelTransferTaskRequest): Promise<TapisResponse> {
        const response = await this.cancelTransferTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * This creates a background task which will transfer files into the storage system
     * Transfer data
     */
    async createTransferTaskRaw(requestParameters: CreateTransferTaskRequest): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskRequest === null || requestParameters.transferTaskRequest === undefined) {
            throw new runtime.RequiredError('transferTaskRequest','Required parameter requestParameters.transferTaskRequest was null or undefined when calling createTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/files/transfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferTaskRequestToJSON(requestParameters.transferTaskRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * This creates a background task which will transfer files into the storage system
     * Transfer data
     */
    async createTransferTask(requestParameters: CreateTransferTaskRequest): Promise<TransferTaskResponse> {
        const response = await this.createTransferTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a transfer task
     */
    async getTransferTaskRaw(requestParameters: GetTransferTaskRequest): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling getTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * Get a transfer task
     */
    async getTransferTask(requestParameters: GetTransferTaskRequest): Promise<TransferTaskResponse> {
        const response = await this.getTransferTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get history of a transfer task
     */
    async getTransferTaskHistoryRaw(requestParameters: GetTransferTaskHistoryRequest): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling getTransferTaskHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}/history`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * Get history of a transfer task
     */
    async getTransferTaskHistory(requestParameters: GetTransferTaskHistoryRequest): Promise<TransferTaskResponse> {
        const response = await this.getTransferTaskHistoryRaw(requestParameters);
        return await response.value();
    }

}
