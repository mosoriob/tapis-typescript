/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StringResponse,
    StringResponseFromJSON,
    StringResponseToJSON,
    TransferTaskListResponse,
    TransferTaskListResponseFromJSON,
    TransferTaskListResponseToJSON,
    TransferTaskRequest,
    TransferTaskRequestFromJSON,
    TransferTaskRequestToJSON,
    TransferTaskResponse,
    TransferTaskResponseFromJSON,
    TransferTaskResponseToJSON,
} from '../models';

export interface CancelTransferTaskRequest {
    transferTaskId: string;
}

export interface CreateTransferTaskRequest {
    transferTaskRequest: TransferTaskRequest;
}

export interface GetRecentTransferTasksRequest {
    limit?: number;
    offset?: number;
}

export interface GetTransferTaskRequest {
    transferTaskId: string;
}

export interface GetTransferTaskDetailsRequest {
    transferTaskId: string;
}

/**
 * 
 */
export class TransfersApi extends runtime.BaseAPI {

    /**
     * Stop/Cancel a transfer task
     */
    async cancelTransferTaskRaw(requestParameters: CancelTransferTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StringResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling cancelTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseFromJSON(jsonValue));
    }

    /**
     * Stop/Cancel a transfer task
     */
    async cancelTransferTask(requestParameters: CancelTransferTaskRequest, initOverrides?: RequestInit): Promise<StringResponse> {
        const response = await this.cancelTransferTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This creates a background task which will transfer files into the storage system
     * Transfer data
     */
    async createTransferTaskRaw(requestParameters: CreateTransferTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskRequest === null || requestParameters.transferTaskRequest === undefined) {
            throw new runtime.RequiredError('transferTaskRequest','Required parameter requestParameters.transferTaskRequest was null or undefined when calling createTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/files/transfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferTaskRequestToJSON(requestParameters.transferTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * This creates a background task which will transfer files into the storage system
     * Transfer data
     */
    async createTransferTask(requestParameters: CreateTransferTaskRequest, initOverrides?: RequestInit): Promise<TransferTaskResponse> {
        const response = await this.createTransferTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of recent transfer tasks starting with the most recent
     * Get a list of recent transfer tasks starting with the most recent
     */
    async getRecentTransferTasksRaw(requestParameters: GetRecentTransferTasksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransferTaskListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskListResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of recent transfer tasks starting with the most recent
     * Get a list of recent transfer tasks starting with the most recent
     */
    async getRecentTransferTasks(requestParameters: GetRecentTransferTasksRequest, initOverrides?: RequestInit): Promise<TransferTaskListResponse> {
        const response = await this.getRecentTransferTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a transfer task
     */
    async getTransferTaskRaw(requestParameters: GetTransferTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling getTransferTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * Get a transfer task
     */
    async getTransferTask(requestParameters: GetTransferTaskRequest, initOverrides?: RequestInit): Promise<TransferTaskResponse> {
        const response = await this.getTransferTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a transfer task
     */
    async getTransferTaskDetailsRaw(requestParameters: GetTransferTaskDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransferTaskResponse>> {
        if (requestParameters.transferTaskId === null || requestParameters.transferTaskId === undefined) {
            throw new runtime.RequiredError('transferTaskId','Required parameter requestParameters.transferTaskId was null or undefined when calling getTransferTaskDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/transfers/{transferTaskId}/details`.replace(`{${"transferTaskId"}}`, encodeURIComponent(String(requestParameters.transferTaskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferTaskResponseFromJSON(jsonValue));
    }

    /**
     * Get details of a transfer task
     */
    async getTransferTaskDetails(requestParameters: GetTransferTaskDetailsRequest, initOverrides?: RequestInit): Promise<TransferTaskResponse> {
        const response = await this.getTransferTaskDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
