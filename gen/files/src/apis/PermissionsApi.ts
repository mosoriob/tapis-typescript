/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FilePermissionResponse,
    FilePermissionResponseFromJSON,
    FilePermissionResponseToJSON,
} from '../models';

export interface PermissionsSystemIdPathDeleteRequest {
    systemId: string;
    path: string;
    username: string;
}

export interface PermissionsSystemIdPathGetRequest {
    systemId: string;
    path: string;
}

export interface PermissionsSystemIdPathPostRequest {
    systemId: string;
    path: string;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     * Remove user permissions to a file/folder. QUESTION - who should be able to delete permissions? Only the owner? 
     * Remove permissions on an object for a user. 
     */
    async permissionsSystemIdPathDeleteRaw(requestParameters: PermissionsSystemIdPathDeleteRequest): Promise<runtime.ApiResponse<FilePermissionResponse>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling permissionsSystemIdPathDelete.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling permissionsSystemIdPathDelete.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling permissionsSystemIdPathDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/permissions/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePermissionResponseFromJSON(jsonValue));
    }

    /**
     * Remove user permissions to a file/folder. QUESTION - who should be able to delete permissions? Only the owner? 
     * Remove permissions on an object for a user. 
     */
    async permissionsSystemIdPathDelete(requestParameters: PermissionsSystemIdPathDeleteRequest): Promise<FilePermissionResponse> {
        const response = await this.permissionsSystemIdPathDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of roles/users that can access the file QUESTION: Who should be able to see access this? Only the owner of the system? 
     * List permissions on an file/folder
     */
    async permissionsSystemIdPathGetRaw(requestParameters: PermissionsSystemIdPathGetRequest): Promise<runtime.ApiResponse<Array<FilePermissionResponse>>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling permissionsSystemIdPathGet.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling permissionsSystemIdPathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/permissions/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilePermissionResponseFromJSON));
    }

    /**
     * Returns a list of roles/users that can access the file QUESTION: Who should be able to see access this? Only the owner of the system? 
     * List permissions on an file/folder
     */
    async permissionsSystemIdPathGet(requestParameters: PermissionsSystemIdPathGetRequest): Promise<Array<FilePermissionResponse>> {
        const response = await this.permissionsSystemIdPathGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add a user to a file/folder. QUESTION - who should be able to add permissions? Only the owner? 
     * Add permissions on an object. 
     */
    async permissionsSystemIdPathPostRaw(requestParameters: PermissionsSystemIdPathPostRequest): Promise<runtime.ApiResponse<FilePermissionResponse>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling permissionsSystemIdPathPost.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling permissionsSystemIdPathPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/permissions/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePermissionResponseFromJSON(jsonValue));
    }

    /**
     * Add a user to a file/folder. QUESTION - who should be able to add permissions? Only the owner? 
     * Add permissions on an object. 
     */
    async permissionsSystemIdPathPost(requestParameters: PermissionsSystemIdPathPostRequest): Promise<FilePermissionResponse> {
        const response = await this.permissionsSystemIdPathPostRaw(requestParameters);
        return await response.value();
    }

}
