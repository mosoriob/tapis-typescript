/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ShareFileRequest,
    ShareFileRequestFromJSON,
    ShareFileRequestToJSON,
    SharedFileObject,
    SharedFileObjectFromJSON,
    SharedFileObjectToJSON,
} from '../models';

export interface ShareDeleteRequest {
    systemId: string;
    path: string;
}

export interface ShareFileOperationRequest {
    systemId: string;
    path: string;
    shareFileRequest?: ShareFileRequest;
}

export interface ShareListRequest {
    systemId: string;
    path: string;
}

/**
 * 
 */
export class ShareApi extends runtime.BaseAPI {

    /**
     * Removes any outstanding shares on a file resource. 
     * Revoke a shared file resource 
     */
    async shareDeleteRaw(requestParameters: ShareDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SharedFileObject>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling shareDelete.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling shareDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/share/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedFileObjectFromJSON(jsonValue));
    }

    /**
     * Removes any outstanding shares on a file resource. 
     * Revoke a shared file resource 
     */
    async shareDelete(requestParameters: ShareDeleteRequest, initOverrides?: RequestInit): Promise<SharedFileObject> {
        const response = await this.shareDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a link that is valid for the requested validity time for the given user for the resource in {systemId} at path {path} 
     * Grant temporary access to a file resource. 
     */
    async shareFileRaw(requestParameters: ShareFileOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SharedFileObject>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling shareFile.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling shareFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/files/share/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareFileRequestToJSON(requestParameters.shareFileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedFileObjectFromJSON(jsonValue));
    }

    /**
     * Creates a link that is valid for the requested validity time for the given user for the resource in {systemId} at path {path} 
     * Grant temporary access to a file resource. 
     */
    async shareFile(requestParameters: ShareFileOperationRequest, initOverrides?: RequestInit): Promise<SharedFileObject> {
        const response = await this.shareFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all shares on a given file resource. 
     * List the shares on a file resource. 
     */
    async shareListRaw(requestParameters: ShareListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SharedFileObject>>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling shareList.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling shareList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/share/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SharedFileObjectFromJSON));
    }

    /**
     * List all shares on a given file resource. 
     * List the shares on a file resource. 
     */
    async shareList(requestParameters: ShareListRequest, initOverrides?: RequestInit): Promise<Array<SharedFileObject>> {
        const response = await this.shareListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
