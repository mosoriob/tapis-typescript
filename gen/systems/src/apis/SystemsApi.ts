/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Systems API
 * The Tapis Systems API provides for management of Tapis Systems including permissions, credentials and Scheduler Profiles.
 *
 * The version of the OpenAPI document: 1.0.0-rc1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqCreateSystem,
    ReqCreateSystemFromJSON,
    ReqCreateSystemToJSON,
    ReqMatchConstraints,
    ReqMatchConstraintsFromJSON,
    ReqMatchConstraintsToJSON,
    ReqPatchSystem,
    ReqPatchSystemFromJSON,
    ReqPatchSystemToJSON,
    ReqPutSystem,
    ReqPutSystemFromJSON,
    ReqPutSystemToJSON,
    ReqSearchSystems,
    ReqSearchSystemsFromJSON,
    ReqSearchSystemsToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespBoolean,
    RespBooleanFromJSON,
    RespBooleanToJSON,
    RespChangeCount,
    RespChangeCountFromJSON,
    RespChangeCountToJSON,
    RespResourceUrl,
    RespResourceUrlFromJSON,
    RespResourceUrlToJSON,
    RespSystem,
    RespSystemFromJSON,
    RespSystemToJSON,
    RespSystems,
    RespSystemsFromJSON,
    RespSystemsToJSON,
} from '../models';

export interface ChangeSystemOwnerRequest {
    systemId: string;
    userName: string;
}

export interface CreateSystemRequest {
    reqCreateSystem: ReqCreateSystem;
    skipCredentialCheck?: boolean;
}

export interface DeleteSystemRequest {
    systemId: string;
}

export interface DisableSystemRequest {
    systemId: string;
}

export interface EnableSystemRequest {
    systemId: string;
}

export interface GetSystemRequest {
    systemId: string;
    returnCredentials?: boolean;
    authnMethod?: string;
    requireExecPerm?: boolean;
    select?: string;
}

export interface GetSystemsRequest {
    search?: string;
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
    showDeleted?: boolean;
}

export interface IsEnabledRequest {
    systemId: string;
}

export interface MatchConstraintsRequest {
    reqMatchConstraints: ReqMatchConstraints;
}

export interface PatchSystemRequest {
    systemId: string;
    reqPatchSystem: ReqPatchSystem;
}

export interface PutSystemRequest {
    systemId: string;
    reqPutSystem: ReqPutSystem;
    skipCredentialCheck?: boolean;
}

export interface SearchSystemsQueryParametersRequest {
    freeFormParameterName?: { [key: string]: string; };
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
}

export interface SearchSystemsRequestBodyRequest {
    reqSearchSystems: ReqSearchSystems;
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
}

export interface UndeleteSystemRequest {
    systemId: string;
}

/**
 * 
 */
export class SystemsApi extends runtime.BaseAPI {

    /**
     * Change owner of a system. 
     * Change system owner
     */
    async changeSystemOwnerRaw(requestParameters: ChangeSystemOwnerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling changeSystemOwner.');
        }

        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling changeSystemOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/changeOwner/{userName}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Change owner of a system. 
     * Change system owner
     */
    async changeSystemOwner(requestParameters: ChangeSystemOwnerRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.changeSystemOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a system using a request body. System name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Name must begin with an alphabetic character and can be no more than 80 characters in length. Description is optional with a maximum length of 2048 characters.  By default any credentials provided for LINUX type systems are verified. Use query parameter skipCredentialCheck=true to bypass initial verification of credentials.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET may be modified and used when making a POST request to create a system. The attributes that are allowed but ignored are    - tenant   - uuid   - deleted   - created   - updated 
     * Create a system
     */
    async createSystemRaw(requestParameters: CreateSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespResourceUrl>> {
        if (requestParameters.reqCreateSystem === null || requestParameters.reqCreateSystem === undefined) {
            throw new runtime.RequiredError('reqCreateSystem','Required parameter requestParameters.reqCreateSystem was null or undefined when calling createSystem.');
        }

        const queryParameters: any = {};

        if (requestParameters.skipCredentialCheck !== undefined) {
            queryParameters['skipCredentialCheck'] = requestParameters.skipCredentialCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateSystemToJSON(requestParameters.reqCreateSystem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceUrlFromJSON(jsonValue));
    }

    /**
     * Create a system using a request body. System name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Name must begin with an alphabetic character and can be no more than 80 characters in length. Description is optional with a maximum length of 2048 characters.  By default any credentials provided for LINUX type systems are verified. Use query parameter skipCredentialCheck=true to bypass initial verification of credentials.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET may be modified and used when making a POST request to create a system. The attributes that are allowed but ignored are    - tenant   - uuid   - deleted   - created   - updated 
     * Create a system
     */
    async createSystem(requestParameters: CreateSystemRequest, initOverrides?: RequestInit): Promise<RespResourceUrl> {
        const response = await this.createSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a system as deleted. System will not appear in queries unless explicitly requested. 
     * Mark a system as deleted
     */
    async deleteSystemRaw(requestParameters: DeleteSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling deleteSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/delete`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark a system as deleted. System will not appear in queries unless explicitly requested. 
     * Mark a system as deleted
     */
    async deleteSystem(requestParameters: DeleteSystemRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.deleteSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a system unavailable for use. 
     * Mark a system unavailabe for use
     */
    async disableSystemRaw(requestParameters: DisableSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling disableSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/disable`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark a system unavailable for use. 
     * Mark a system unavailabe for use
     */
    async disableSystem(requestParameters: DisableSystemRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.disableSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a system available for use. 
     * Mark a system availabe for use
     */
    async enableSystemRaw(requestParameters: EnableSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling enableSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/enable`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark a system available for use. 
     * Mark a system availabe for use
     */
    async enableSystem(requestParameters: EnableSystemRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.enableSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information for a system given the system name. Use query parameter returnCredentials=true to have effectiveUserId credentials included in the response. Use query parameter authnMethod=<method> to override default authn method. 
     * Retrieve system details
     */
    async getSystemRaw(requestParameters: GetSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSystem>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling getSystem.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnCredentials !== undefined) {
            queryParameters['returnCredentials'] = requestParameters.returnCredentials;
        }

        if (requestParameters.authnMethod !== undefined) {
            queryParameters['authnMethod'] = requestParameters.authnMethod;
        }

        if (requestParameters.requireExecPerm !== undefined) {
            queryParameters['requireExecPerm'] = requestParameters.requireExecPerm;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSystemFromJSON(jsonValue));
    }

    /**
     * Retrieve information for a system given the system name. Use query parameter returnCredentials=true to have effectiveUserId credentials included in the response. Use query parameter authnMethod=<method> to override default authn method. 
     * Retrieve system details
     */
    async getSystem(requestParameters: GetSystemRequest, initOverrides?: RequestInit): Promise<RespSystem> {
        const response = await this.getSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of systems. Use search and select query parameters to limit results.
     * Retrieve systems
     */
    async getSystemsRaw(requestParameters: GetSystemsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSystems>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['showDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSystemsFromJSON(jsonValue));
    }

    /**
     * Retrieve list of systems. Use search and select query parameters to limit results.
     * Retrieve systems
     */
    async getSystems(requestParameters: GetSystemsRequest, initOverrides?: RequestInit): Promise<RespSystems> {
        const response = await this.getSystemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a system is currently enabled, i.e. available for use. 
     * Check if system is currently enabled
     */
    async isEnabledRaw(requestParameters: IsEnabledRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBoolean>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling isEnabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/isEnabled`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBooleanFromJSON(jsonValue));
    }

    /**
     * Check if a system is currently enabled, i.e. available for use. 
     * Check if system is currently enabled
     */
    async isEnabled(requestParameters: IsEnabledRequest, initOverrides?: RequestInit): Promise<RespBoolean> {
        const response = await this.isEnabledRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * *WARNING Capability constraint matching is not yet supported.* Retrieve details for systems. Use request body to specify constraint conditions as an SQL-like WHERE clause. 
     * Retrieve systems satisfying specified constraint conditions (WARNING - not yet supported)
     */
    async matchConstraintsRaw(requestParameters: MatchConstraintsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSystems>> {
        if (requestParameters.reqMatchConstraints === null || requestParameters.reqMatchConstraints === undefined) {
            throw new runtime.RequiredError('reqMatchConstraints','Required parameter requestParameters.reqMatchConstraints was null or undefined when calling matchConstraints.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/match/constraints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqMatchConstraintsToJSON(requestParameters.reqMatchConstraints),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSystemsFromJSON(jsonValue));
    }

    /**
     * *WARNING Capability constraint matching is not yet supported.* Retrieve details for systems. Use request body to specify constraint conditions as an SQL-like WHERE clause. 
     * Retrieve systems satisfying specified constraint conditions (WARNING - not yet supported)
     */
    async matchConstraints(requestParameters: MatchConstraintsRequest, initOverrides?: RequestInit): Promise<RespSystems> {
        const response = await this.matchConstraintsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update selected attributes of a system. Request body may only contain updatable attributes. System must exist.  Attributes that may not be updated via PATCH are    - id   - systemType   - owner   - enabled   - bucketName   - rootDir   - isDtn   - canExec  Note that the attributes owner and enabled may be modified using other endpoints. 
     * Update selected attributes of a system
     */
    async patchSystemRaw(requestParameters: PatchSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespResourceUrl>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling patchSystem.');
        }

        if (requestParameters.reqPatchSystem === null || requestParameters.reqPatchSystem === undefined) {
            throw new runtime.RequiredError('reqPatchSystem','Required parameter requestParameters.reqPatchSystem was null or undefined when calling patchSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReqPatchSystemToJSON(requestParameters.reqPatchSystem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceUrlFromJSON(jsonValue));
    }

    /**
     * Update selected attributes of a system. Request body may only contain updatable attributes. System must exist.  Attributes that may not be updated via PATCH are    - id   - systemType   - owner   - enabled   - bucketName   - rootDir   - isDtn   - canExec  Note that the attributes owner and enabled may be modified using other endpoints. 
     * Update selected attributes of a system
     */
    async patchSystem(requestParameters: PatchSystemRequest, initOverrides?: RequestInit): Promise<RespResourceUrl> {
        const response = await this.patchSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update all updatable attributes of a system using a request body identical to POST. System must exist.  By default any credentials provided for LINUX type systems are verified. Use query parameter skipCredentialCheck=true to bypass initial verification of credentials.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET may be modified and used when making a PUT request to update a system.  The attributes that are allowed but ignored for both PUT and POST are    - tenant   - uuid   - deleted   - created   - updated  In addition for a PUT operation the following non-updatable attributes are allowed but ignored    - id   - systemType   - owner   - enabled   - bucketName   - rootDir   - isDtn   - canExec  Note that the attributes owner and enabled may be modified using other endpoints. 
     * Update all updatable attributes of a system
     */
    async putSystemRaw(requestParameters: PutSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespResourceUrl>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling putSystem.');
        }

        if (requestParameters.reqPutSystem === null || requestParameters.reqPutSystem === undefined) {
            throw new runtime.RequiredError('reqPutSystem','Required parameter requestParameters.reqPutSystem was null or undefined when calling putSystem.');
        }

        const queryParameters: any = {};

        if (requestParameters.skipCredentialCheck !== undefined) {
            queryParameters['skipCredentialCheck'] = requestParameters.skipCredentialCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqPutSystemToJSON(requestParameters.reqPutSystem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceUrlFromJSON(jsonValue));
    }

    /**
     * Update all updatable attributes of a system using a request body identical to POST. System must exist.  By default any credentials provided for LINUX type systems are verified. Use query parameter skipCredentialCheck=true to bypass initial verification of credentials.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET may be modified and used when making a PUT request to update a system.  The attributes that are allowed but ignored for both PUT and POST are    - tenant   - uuid   - deleted   - created   - updated  In addition for a PUT operation the following non-updatable attributes are allowed but ignored    - id   - systemType   - owner   - enabled   - bucketName   - rootDir   - isDtn   - canExec  Note that the attributes owner and enabled may be modified using other endpoints. 
     * Update all updatable attributes of a system
     */
    async putSystem(requestParameters: PutSystemRequest, initOverrides?: RequestInit): Promise<RespResourceUrl> {
        const response = await this.putSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details for systems. Use query parameters to specify search conditions. For example owner.eq=jdoe&port.gt=1024
     * Retrieve list of systems matching search conditions specified as query parameters
     */
    async searchSystemsQueryParametersRaw(requestParameters: SearchSystemsQueryParametersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSystems>> {
        const queryParameters: any = {};

        if (requestParameters.freeFormParameterName !== undefined) {
            queryParameters['freeFormParameterName'] = requestParameters.freeFormParameterName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSystemsFromJSON(jsonValue));
    }

    /**
     * Retrieve details for systems. Use query parameters to specify search conditions. For example owner.eq=jdoe&port.gt=1024
     * Retrieve list of systems matching search conditions specified as query parameters
     */
    async searchSystemsQueryParameters(requestParameters: SearchSystemsQueryParametersRequest, initOverrides?: RequestInit): Promise<RespSystems> {
        const response = await this.searchSystemsQueryParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details for systems. Use request body to specify SQL-like search conditions. 
     * Retrieve list of systems matching search conditions
     */
    async searchSystemsRequestBodyRaw(requestParameters: SearchSystemsRequestBodyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSystems>> {
        if (requestParameters.reqSearchSystems === null || requestParameters.reqSearchSystems === undefined) {
            throw new runtime.RequiredError('reqSearchSystems','Required parameter requestParameters.reqSearchSystems was null or undefined when calling searchSystemsRequestBody.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqSearchSystemsToJSON(requestParameters.reqSearchSystems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSystemsFromJSON(jsonValue));
    }

    /**
     * Retrieve details for systems. Use request body to specify SQL-like search conditions. 
     * Retrieve list of systems matching search conditions
     */
    async searchSystemsRequestBody(requestParameters: SearchSystemsRequestBodyRequest, initOverrides?: RequestInit): Promise<RespSystems> {
        const response = await this.searchSystemsRequestBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a system as not deleted. System will appear in queries. 
     * Mark a system as not deleted
     */
    async undeleteSystemRaw(requestParameters: UndeleteSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling undeleteSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/{systemId}/undelete`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark a system as not deleted. System will appear in queries. 
     * Mark a system as not deleted
     */
    async undeleteSystem(requestParameters: UndeleteSystemRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.undeleteSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
