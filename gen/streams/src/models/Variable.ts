/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     * The name of variable.
     * @type {string}
     * @memberof Variable
     */
    var_name?: string;
    /**
     * The unique identifier for variable.
     * @type {string}
     * @memberof Variable
     */
    var_id?: string;
    /**
     * The owner for variable.
     * @type {string}
     * @memberof Variable
     */
    owner?: string;
    /**
     * The instrument id generated by CHORDS.
     * @type {string}
     * @memberof Variable
     */
    inst_id?: string;
    /**
     * The shortname of variable.
     * @type {string}
     * @memberof Variable
     */
    shortname?: string;
    /**
     * The unit to measure property of variable.
     * @type {string}
     * @memberof Variable
     */
    unit?: string;
    /**
     * The unit abbrevation to measure variable.
     * @type {string}
     * @memberof Variable
     */
    unit_abbrev?: string;
    /**
     * The property measured by variable.
     * @type {string}
     * @memberof Variable
     */
    measured_property?: string;
    /**
     * User entered metadata for the variable
     * @type {object}
     * @memberof Variable
     */
    metadata?: object;
    /**
     * Variable ID in chords
     * @type {number}
     * @memberof Variable
     */
    chords_id?: number;
}

export function VariableFromJSON(json: any): Variable {
    return VariableFromJSONTyped(json, false);
}

export function VariableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Variable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'var_name': !exists(json, 'var_name') ? undefined : json['var_name'],
        'var_id': !exists(json, 'var_id') ? undefined : json['var_id'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'inst_id': !exists(json, 'inst_id') ? undefined : json['inst_id'],
        'shortname': !exists(json, 'shortname') ? undefined : json['shortname'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
        'unit_abbrev': !exists(json, 'unit_abbrev') ? undefined : json['unit_abbrev'],
        'measured_property': !exists(json, 'measured_property') ? undefined : json['measured_property'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'chords_id': !exists(json, 'chords_id') ? undefined : json['chords_id'],
    };
}

export function VariableToJSON(value?: Variable | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'var_name': value.var_name,
        'var_id': value.var_id,
        'owner': value.owner,
        'inst_id': value.inst_id,
        'shortname': value.shortname,
        'unit': value.unit,
        'unit_abbrev': value.unit_abbrev,
        'measured_property': value.measured_property,
        'metadata': value.metadata,
        'chords_id': value.chords_id,
    };
}


