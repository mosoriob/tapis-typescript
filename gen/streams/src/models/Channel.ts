/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChannelPermissions,
    ChannelPermissionsFromJSON,
    ChannelPermissionsFromJSONTyped,
    ChannelPermissionsToJSON,
    ChannelTriggersWithActions,
    ChannelTriggersWithActionsFromJSON,
    ChannelTriggersWithActionsFromJSONTyped,
    ChannelTriggersWithActionsToJSON,
} from './';

/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * The name of channel.
     * @type {string}
     * @memberof Channel
     */
    channel_name?: string;
    /**
     * The id generated by Tapis.
     * @type {string}
     * @memberof Channel
     */
    channel_id?: string;
    /**
     * The time of channel creation
     * @type {string}
     * @memberof Channel
     */
    create_time?: string;
    /**
     * The status of channel
     * @type {string}
     * @memberof Channel
     */
    status?: ChannelStatusEnum;
    /**
     * The time of channel update
     * @type {string}
     * @memberof Channel
     */
    last_updated?: string;
    /**
     * task id from Kapacitor
     * @type {string}
     * @memberof Channel
     */
    task_id?: string;
    /**
     * 
     * @type {Array<ChannelTriggersWithActions>}
     * @memberof Channel
     */
    triggers_with_actions?: Array<ChannelTriggersWithActions>;
    /**
     * Template id
     * @type {string}
     * @memberof Channel
     */
    template_id?: string;
    /**
     * 
     * @type {ChannelPermissions}
     * @memberof Channel
     */
    permissions?: ChannelPermissions;
}

/**
* @export
* @enum {string}
*/
export enum ChannelStatusEnum {
    Inactive = 'INACTIVE',
    Active = 'ACTIVE'
}

export function ChannelFromJSON(json: any): Channel {
    return ChannelFromJSONTyped(json, false);
}

export function ChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Channel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channel_name': !exists(json, 'channel_name') ? undefined : json['channel_name'],
        'channel_id': !exists(json, 'channel_id') ? undefined : json['channel_id'],
        'create_time': !exists(json, 'create_time') ? undefined : json['create_time'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'last_updated': !exists(json, 'last_updated') ? undefined : json['last_updated'],
        'task_id': !exists(json, 'task_id') ? undefined : json['task_id'],
        'triggers_with_actions': !exists(json, 'triggers_with_actions') ? undefined : ((json['triggers_with_actions'] as Array<any>).map(ChannelTriggersWithActionsFromJSON)),
        'template_id': !exists(json, 'template_id') ? undefined : json['template_id'],
        'permissions': !exists(json, 'permissions') ? undefined : ChannelPermissionsFromJSON(json['permissions']),
    };
}

export function ChannelToJSON(value?: Channel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_name': value.channel_name,
        'channel_id': value.channel_id,
        'create_time': value.create_time,
        'status': value.status,
        'last_updated': value.last_updated,
        'task_id': value.task_id,
        'triggers_with_actions': value.triggers_with_actions === undefined ? undefined : ((value.triggers_with_actions as Array<any>).map(ChannelTriggersWithActionsToJSON)),
        'template_id': value.template_id,
        'permissions': ChannelPermissionsToJSON(value.permissions),
    };
}

