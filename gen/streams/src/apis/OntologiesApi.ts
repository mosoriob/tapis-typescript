/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReqAddOntology,
    ReqAddOntologyFromJSON,
    ReqAddOntologyToJSON,
    RespAddOntology,
    RespAddOntologyFromJSON,
    RespAddOntologyToJSON,
    RespDeleteOntology,
    RespDeleteOntologyFromJSON,
    RespDeleteOntologyToJSON,
    RespGetOntology,
    RespGetOntologyFromJSON,
    RespGetOntologyToJSON,
    RespListOntologies,
    RespListOntologiesFromJSON,
    RespListOntologiesToJSON,
    RespUpdateOntology,
    RespUpdateOntologyFromJSON,
    RespUpdateOntologyToJSON,
} from '../models';

export interface AddOntologyRequest {
    reqAddOntology: ReqAddOntology;
}

export interface DeleteOntologyRequest {
    ontoId: string;
}

export interface GetOntologyRequest {
    ontoId: string;
}

export interface ListOntologiesRequest {
    query?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateOntologyRequest {
    ontoId: string;
    reqAddOntology: ReqAddOntology;
}

/**
 * 
 */
export class OntologiesApi extends runtime.BaseAPI {

    /**
     * Add an ontology .
     * Add an ontology .
     */
    async addOntologyRaw(requestParameters: AddOntologyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespAddOntology>> {
        if (requestParameters.reqAddOntology === null || requestParameters.reqAddOntology === undefined) {
            throw new runtime.RequiredError('reqAddOntology','Required parameter requestParameters.reqAddOntology was null or undefined when calling addOntology.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/ontologies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqAddOntologyToJSON(requestParameters.reqAddOntology),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAddOntologyFromJSON(jsonValue));
    }

    /**
     * Add an ontology .
     * Add an ontology .
     */
    async addOntology(requestParameters: AddOntologyRequest, initOverrides?: RequestInit): Promise<RespAddOntology> {
        const response = await this.addOntologyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an ontology
     * Delete an ontology
     */
    async deleteOntologyRaw(requestParameters: DeleteOntologyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDeleteOntology>> {
        if (requestParameters.ontoId === null || requestParameters.ontoId === undefined) {
            throw new runtime.RequiredError('ontoId','Required parameter requestParameters.ontoId was null or undefined when calling deleteOntology.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/ontologies/{onto_id}`.replace(`{${"onto_id"}}`, encodeURIComponent(String(requestParameters.ontoId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteOntologyFromJSON(jsonValue));
    }

    /**
     * Delete an ontology
     * Delete an ontology
     */
    async deleteOntology(requestParameters: DeleteOntologyRequest, initOverrides?: RequestInit): Promise<RespDeleteOntology> {
        const response = await this.deleteOntologyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ontology details.
     * Get ontology details.
     */
    async getOntologyRaw(requestParameters: GetOntologyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetOntology>> {
        if (requestParameters.ontoId === null || requestParameters.ontoId === undefined) {
            throw new runtime.RequiredError('ontoId','Required parameter requestParameters.ontoId was null or undefined when calling getOntology.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/ontologies/{onto_id}`.replace(`{${"onto_id"}}`, encodeURIComponent(String(requestParameters.ontoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetOntologyFromJSON(jsonValue));
    }

    /**
     * Get ontology details.
     * Get ontology details.
     */
    async getOntology(requestParameters: GetOntologyRequest, initOverrides?: RequestInit): Promise<RespGetOntology> {
        const response = await this.getOntologyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ontologies.
     * List ontologies.
     */
    async listOntologiesRaw(requestParameters: ListOntologiesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespListOntologies>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/ontologies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListOntologiesFromJSON(jsonValue));
    }

    /**
     * List ontologies.
     * List ontologies.
     */
    async listOntologies(requestParameters: ListOntologiesRequest, initOverrides?: RequestInit): Promise<RespListOntologies> {
        const response = await this.listOntologiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an ontology
     * Update an ontology
     */
    async updateOntologyRaw(requestParameters: UpdateOntologyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespUpdateOntology>> {
        if (requestParameters.ontoId === null || requestParameters.ontoId === undefined) {
            throw new runtime.RequiredError('ontoId','Required parameter requestParameters.ontoId was null or undefined when calling updateOntology.');
        }

        if (requestParameters.reqAddOntology === null || requestParameters.reqAddOntology === undefined) {
            throw new runtime.RequiredError('reqAddOntology','Required parameter requestParameters.reqAddOntology was null or undefined when calling updateOntology.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/ontologies/{onto_id}`.replace(`{${"onto_id"}}`, encodeURIComponent(String(requestParameters.ontoId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqAddOntologyToJSON(requestParameters.reqAddOntology),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateOntologyFromJSON(jsonValue));
    }

    /**
     * Update an ontology
     * Update an ontology
     */
    async updateOntology(requestParameters: UpdateOntologyRequest, initOverrides?: RequestInit): Promise<RespUpdateOntology> {
        const response = await this.updateOntologyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
