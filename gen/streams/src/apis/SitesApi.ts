/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReqCreateSite,
    ReqCreateSiteFromJSON,
    ReqCreateSiteToJSON,
    RespCreateSite,
    RespCreateSiteFromJSON,
    RespCreateSiteToJSON,
    RespDeleteSite,
    RespDeleteSiteFromJSON,
    RespDeleteSiteToJSON,
    RespGetSite,
    RespGetSiteFromJSON,
    RespGetSiteToJSON,
    RespListSites,
    RespListSitesFromJSON,
    RespListSitesToJSON,
    RespUpdateSite,
    RespUpdateSiteFromJSON,
    RespUpdateSiteToJSON,
} from '../models';

export interface CreateSiteRequest {
    projectUuid: string;
    reqCreateSite: ReqCreateSite;
}

export interface DeleteSiteRequest {
    projectUuid: string;
    siteId: string;
}

export interface GetSiteRequest {
    projectUuid: string;
    siteId: string;
}

export interface ListSitesRequest {
    projectUuid: string;
    query?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateSiteRequest {
    projectUuid: string;
    siteId: string;
    reqCreateSite: ReqCreateSite;
}

/**
 * 
 */
export class SitesApi extends runtime.BaseAPI {

    /**
     * Create a site.
     * Create a site.
     */
    async createSiteRaw(requestParameters: CreateSiteRequest): Promise<runtime.ApiResponse<RespCreateSite>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling createSite.');
        }

        if (requestParameters.reqCreateSite === null || requestParameters.reqCreateSite === undefined) {
            throw new runtime.RequiredError('reqCreateSite','Required parameter requestParameters.reqCreateSite was null or undefined when calling createSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/projects/{project_uuid}/sites`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateSiteToJSON(requestParameters.reqCreateSite),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateSiteFromJSON(jsonValue));
    }

    /**
     * Create a site.
     * Create a site.
     */
    async createSite(requestParameters: CreateSiteRequest): Promise<RespCreateSite> {
        const response = await this.createSiteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a site
     * Delete a site
     */
    async deleteSiteRaw(requestParameters: DeleteSiteRequest): Promise<runtime.ApiResponse<RespDeleteSite>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling deleteSite.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling deleteSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_uuid}/sites/{site_id}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteSiteFromJSON(jsonValue));
    }

    /**
     * Delete a site
     * Delete a site
     */
    async deleteSite(requestParameters: DeleteSiteRequest): Promise<RespDeleteSite> {
        const response = await this.deleteSiteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get site details.
     * Get site details.
     */
    async getSiteRaw(requestParameters: GetSiteRequest): Promise<runtime.ApiResponse<RespGetSite>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getSite.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling getSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_uuid}/sites/{site_id}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetSiteFromJSON(jsonValue));
    }

    /**
     * Get site details.
     * Get site details.
     */
    async getSite(requestParameters: GetSiteRequest): Promise<RespGetSite> {
        const response = await this.getSiteRaw(requestParameters);
        return await response.value();
    }

    /**
     * List sites.
     * List sites.
     */
    async listSitesRaw(requestParameters: ListSitesRequest): Promise<runtime.ApiResponse<RespListSites>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling listSites.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_uuid}/sites`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListSitesFromJSON(jsonValue));
    }

    /**
     * List sites.
     * List sites.
     */
    async listSites(requestParameters: ListSitesRequest): Promise<RespListSites> {
        const response = await this.listSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a site
     * Update a site
     */
    async updateSiteRaw(requestParameters: UpdateSiteRequest): Promise<runtime.ApiResponse<RespUpdateSite>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling updateSite.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling updateSite.');
        }

        if (requestParameters.reqCreateSite === null || requestParameters.reqCreateSite === undefined) {
            throw new runtime.RequiredError('reqCreateSite','Required parameter requestParameters.reqCreateSite was null or undefined when calling updateSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/projects/{project_uuid}/sites/{site_id}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateSiteToJSON(requestParameters.reqCreateSite),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateSiteFromJSON(jsonValue));
    }

    /**
     * Update a site
     * Update a site
     */
    async updateSite(requestParameters: UpdateSiteRequest): Promise<RespUpdateSite> {
        const response = await this.updateSiteRaw(requestParameters);
        return await response.value();
    }

}
