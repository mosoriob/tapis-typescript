/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NewArchive,
    NewArchiveFromJSON,
    NewArchiveToJSON,
    RespArchiveProject,
    RespArchiveProjectFromJSON,
    RespArchiveProjectToJSON,
    RespListArchives,
    RespListArchivesFromJSON,
    RespListArchivesToJSON,
} from '../models';

export interface ArchiveProjectRequest {
    projectId: string;
    newArchive: NewArchive;
}

export interface ListArchivesRequest {
    projectId: string;
}

/**
 * 
 */
export class ArchivesApi extends runtime.BaseAPI {

    /**
     * Archive a projects data and metadata
     * Archive a projects data and metadata
     */
    async archiveProjectRaw(requestParameters: ArchiveProjectRequest): Promise<runtime.ApiResponse<RespArchiveProject>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling archiveProject.');
        }

        if (requestParameters.newArchive === null || requestParameters.newArchive === undefined) {
            throw new runtime.RequiredError('newArchive','Required parameter requestParameters.newArchive was null or undefined when calling archiveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}/archives`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewArchiveToJSON(requestParameters.newArchive),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespArchiveProjectFromJSON(jsonValue));
    }

    /**
     * Archive a projects data and metadata
     * Archive a projects data and metadata
     */
    async archiveProject(requestParameters: ArchiveProjectRequest): Promise<RespArchiveProject> {
        const response = await this.archiveProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * List Archives policies for a project
     * List Archive policies for a project
     */
    async listArchivesRaw(requestParameters: ListArchivesRequest): Promise<runtime.ApiResponse<RespListArchives>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listArchives.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}/archives`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListArchivesFromJSON(jsonValue));
    }

    /**
     * List Archives policies for a project
     * List Archive policies for a project
     */
    async listArchives(requestParameters: ListArchivesRequest): Promise<RespListArchives> {
        const response = await this.listArchivesRaw(requestParameters);
        return await response.value();
    }

}
