/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Resphealthcheck,
    ResphealthcheckFromJSON,
    ResphealthcheckToJSON,
    Resphello,
    ResphelloFromJSON,
    ResphelloToJSON,
    Respready,
    RespreadyFromJSON,
    RespreadyToJSON,
} from '../models';

export interface HealthcheckRequest {
    tenant: string;
}

/**
 * 
 */
export class HealthApi extends runtime.BaseAPI {

    /**
     * Checks health of meta, kapacitor, influx and chords
     * Healthcheck
     */
    async healthcheckRaw(requestParameters: HealthcheckRequest): Promise<runtime.ApiResponse<Resphealthcheck>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling healthcheck.');
        }

        const queryParameters: any = {};

        if (requestParameters.tenant !== undefined) {
            queryParameters['tenant'] = requestParameters.tenant;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/healthcheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResphealthcheckFromJSON(jsonValue));
    }

    /**
     * Checks health of meta, kapacitor, influx and chords
     * Healthcheck
     */
    async healthcheck(requestParameters: HealthcheckRequest): Promise<Resphealthcheck> {
        const response = await this.healthcheckRaw(requestParameters);
        return await response.value();
    }

    /**
     * Say Hello
     * Say Hello
     */
    async helloRaw(): Promise<runtime.ApiResponse<Resphello>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResphelloFromJSON(jsonValue));
    }

    /**
     * Say Hello
     * Say Hello
     */
    async hello(): Promise<Resphello> {
        const response = await this.helloRaw();
        return await response.value();
    }

    /**
     * Readiness check
     * Check readiness of InfluxDB, Chords and Kapacitor
     */
    async readyRaw(): Promise<runtime.ApiResponse<Respready>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespreadyFromJSON(jsonValue));
    }

    /**
     * Readiness check
     * Check readiness of InfluxDB, Chords and Kapacitor
     */
    async ready(): Promise<Respready> {
        const response = await this.readyRaw();
        return await response.value();
    }

}
