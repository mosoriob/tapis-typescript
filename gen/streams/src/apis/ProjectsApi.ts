/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReqCreateProject,
    ReqCreateProjectFromJSON,
    ReqCreateProjectToJSON,
    RespCreateProject,
    RespCreateProjectFromJSON,
    RespCreateProjectToJSON,
    RespDeleteProject,
    RespDeleteProjectFromJSON,
    RespDeleteProjectToJSON,
    RespGetProject,
    RespGetProjectFromJSON,
    RespGetProjectToJSON,
    RespListProjects,
    RespListProjectsFromJSON,
    RespListProjectsToJSON,
    RespUpdateProject,
    RespUpdateProjectFromJSON,
    RespUpdateProjectToJSON,
} from '../models';

export interface CreateProjectRequest {
    reqCreateProject: ReqCreateProject;
}

export interface DeleteProjectRequest {
    projectId: string;
}

export interface GetProjectRequest {
    projectId: string;
}

export interface ListProjectsRequest {
    query?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateProjectRequest {
    projectId: string;
    reqCreateProject: ReqCreateProject;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Create a project.
     * Create a project.
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespCreateProject>> {
        if (requestParameters.reqCreateProject === null || requestParameters.reqCreateProject === undefined) {
            throw new runtime.RequiredError('reqCreateProject','Required parameter requestParameters.reqCreateProject was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateProjectToJSON(requestParameters.reqCreateProject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateProjectFromJSON(jsonValue));
    }

    /**
     * Create a project.
     * Create a project.
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<RespCreateProject> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project
     * Delete a project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDeleteProject>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDeleteProjectFromJSON(jsonValue));
    }

    /**
     * Delete a project
     * Delete a project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<RespDeleteProject> {
        const response = await this.deleteProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project details.
     * Get project details.
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetProject>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetProjectFromJSON(jsonValue));
    }

    /**
     * Get project details.
     * Get project details.
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit): Promise<RespGetProject> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List projects.
     * List projects.
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespListProjects>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListProjectsFromJSON(jsonValue));
    }

    /**
     * List projects.
     * List projects.
     */
    async listProjects(requestParameters: ListProjectsRequest, initOverrides?: RequestInit): Promise<RespListProjects> {
        const response = await this.listProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a project
     * Update a project
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespUpdateProject>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProject.');
        }

        if (requestParameters.reqCreateProject === null || requestParameters.reqCreateProject === undefined) {
            throw new runtime.RequiredError('reqCreateProject','Required parameter requestParameters.reqCreateProject was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateProjectToJSON(requestParameters.reqCreateProject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateProjectFromJSON(jsonValue));
    }

    /**
     * Update a project
     * Update a project
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<RespUpdateProject> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
