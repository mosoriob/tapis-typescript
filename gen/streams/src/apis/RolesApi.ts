/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NewRole,
    NewRoleFromJSON,
    NewRoleToJSON,
    RespGrantRole,
    RespGrantRoleFromJSON,
    RespGrantRoleToJSON,
    RespListRoles,
    RespListRolesFromJSON,
    RespListRolesToJSON,
} from '../models';

export interface GrantRoleRequest {
    newRole: NewRole;
}

export interface ListRolesRequest {
    user: string;
    resourceType: ListRolesResourceTypeEnum;
    resourceId: string;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Grant user role.
     * Grant user role.
     */
    async grantRoleRaw(requestParameters: GrantRoleRequest): Promise<runtime.ApiResponse<RespGrantRole>> {
        if (requestParameters.newRole === null || requestParameters.newRole === undefined) {
            throw new runtime.RequiredError('newRole','Required parameter requestParameters.newRole was null or undefined when calling grantRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleToJSON(requestParameters.newRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGrantRoleFromJSON(jsonValue));
    }

    /**
     * Grant user role.
     * Grant user role.
     */
    async grantRole(requestParameters: GrantRoleRequest): Promise<RespGrantRole> {
        const response = await this.grantRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get roles for a given user
     * List roles for a given user
     */
    async listRolesRaw(requestParameters: ListRolesRequest): Promise<runtime.ApiResponse<RespListRoles>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling listRoles.');
        }

        if (requestParameters.resourceType === null || requestParameters.resourceType === undefined) {
            throw new runtime.RequiredError('resourceType','Required parameter requestParameters.resourceType was null or undefined when calling listRoles.');
        }

        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling listRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.resourceType !== undefined) {
            queryParameters['resource_type'] = requestParameters.resourceType;
        }

        if (requestParameters.resourceId !== undefined) {
            queryParameters['resource_id'] = requestParameters.resourceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListRolesFromJSON(jsonValue));
    }

    /**
     * Get roles for a given user
     * List roles for a given user
     */
    async listRoles(requestParameters: ListRolesRequest): Promise<RespListRoles> {
        const response = await this.listRolesRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListRolesResourceTypeEnum {
    Project = 'project',
    Channel = 'channel'
}
