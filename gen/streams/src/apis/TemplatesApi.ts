/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReqCreateTemplate,
    ReqCreateTemplateFromJSON,
    ReqCreateTemplateToJSON,
    RespCreateTemplate,
    RespCreateTemplateFromJSON,
    RespCreateTemplateToJSON,
    RespGetTemplate,
    RespGetTemplateFromJSON,
    RespGetTemplateToJSON,
    RespListTemplates,
    RespListTemplatesFromJSON,
    RespListTemplatesToJSON,
    RespUpdateTemplate,
    RespUpdateTemplateFromJSON,
    RespUpdateTemplateToJSON,
} from '../models';

export interface CreateTemplateRequest {
    reqCreateTemplate: ReqCreateTemplate;
}

export interface GetTemplateRequest {
    templateId: string;
}

export interface ListTemplatesRequest {
    query?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateTemplateRequest {
    templateId: string;
    reqCreateTemplate: ReqCreateTemplate;
}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Create template.
     * Create template.
     */
    async createTemplateRaw(requestParameters: CreateTemplateRequest): Promise<runtime.ApiResponse<RespCreateTemplate>> {
        if (requestParameters.reqCreateTemplate === null || requestParameters.reqCreateTemplate === undefined) {
            throw new runtime.RequiredError('reqCreateTemplate','Required parameter requestParameters.reqCreateTemplate was null or undefined when calling createTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateTemplateToJSON(requestParameters.reqCreateTemplate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateTemplateFromJSON(jsonValue));
    }

    /**
     * Create template.
     * Create template.
     */
    async createTemplate(requestParameters: CreateTemplateRequest): Promise<RespCreateTemplate> {
        const response = await this.createTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get template.
     * Get templates.
     */
    async getTemplateRaw(requestParameters: GetTemplateRequest): Promise<runtime.ApiResponse<RespGetTemplate>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetTemplateFromJSON(jsonValue));
    }

    /**
     * Get template.
     * Get templates.
     */
    async getTemplate(requestParameters: GetTemplateRequest): Promise<RespGetTemplate> {
        const response = await this.getTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List templates.
     * List templates.
     */
    async listTemplatesRaw(requestParameters: ListTemplatesRequest): Promise<runtime.ApiResponse<RespListTemplates>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListTemplatesFromJSON(jsonValue));
    }

    /**
     * List templates.
     * List templates.
     */
    async listTemplates(requestParameters: ListTemplatesRequest): Promise<RespListTemplates> {
        const response = await this.listTemplatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update template.
     * Update template.
     */
    async updateTemplateRaw(requestParameters: UpdateTemplateRequest): Promise<runtime.ApiResponse<RespUpdateTemplate>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling updateTemplate.');
        }

        if (requestParameters.reqCreateTemplate === null || requestParameters.reqCreateTemplate === undefined) {
            throw new runtime.RequiredError('reqCreateTemplate','Required parameter requestParameters.reqCreateTemplate was null or undefined when calling updateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateTemplateToJSON(requestParameters.reqCreateTemplate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateTemplateFromJSON(jsonValue));
    }

    /**
     * Update template.
     * Update template.
     */
    async updateTemplate(requestParameters: UpdateTemplateRequest): Promise<RespUpdateTemplate> {
        const response = await this.updateTemplateRaw(requestParameters);
        return await response.value();
    }

}
