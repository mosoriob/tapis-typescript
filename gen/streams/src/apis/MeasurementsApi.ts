/* tslint:disable */
/* eslint-disable */
/**
 * Streams API
 * Manage Tapis Streams API.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReqCreateMeasurement,
    ReqCreateMeasurementFromJSON,
    ReqCreateMeasurementToJSON,
    RespCreateMeasurement,
    RespCreateMeasurementFromJSON,
    RespCreateMeasurementToJSON,
    RespDownloadMeasurements,
    RespDownloadMeasurementsFromJSON,
    RespDownloadMeasurementsToJSON,
    RespListMeasurements,
    RespListMeasurementsFromJSON,
    RespListMeasurementsToJSON,
} from '../models';

export interface CreateMeasurementRequest {
    reqCreateMeasurement: ReqCreateMeasurement;
}

export interface DownloadMeasurementsRequest {
    instId: string;
    query?: string;
    limit?: number;
    offset?: number;
    startDate?: string;
    endDate?: string;
    withMetadata?: boolean;
    format?: string;
}

export interface ListMeasurementsRequest {
    projectId: string;
    siteId: string;
    instId: string;
    query?: string;
    limit?: number;
    offset?: number;
    startDate?: string;
    endDate?: string;
    geojson?: object;
    format?: string;
    withMetadata?: boolean;
}

/**
 * 
 */
export class MeasurementsApi extends runtime.BaseAPI {

    /**
     * Create a measurement.
     * Create a measurement.
     */
    async createMeasurementRaw(requestParameters: CreateMeasurementRequest): Promise<runtime.ApiResponse<RespCreateMeasurement>> {
        if (requestParameters.reqCreateMeasurement === null || requestParameters.reqCreateMeasurement === undefined) {
            throw new runtime.RequiredError('reqCreateMeasurement','Required parameter requestParameters.reqCreateMeasurement was null or undefined when calling createMeasurement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/streams/measurements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateMeasurementToJSON(requestParameters.reqCreateMeasurement),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCreateMeasurementFromJSON(jsonValue));
    }

    /**
     * Create a measurement.
     * Create a measurement.
     */
    async createMeasurement(requestParameters: CreateMeasurementRequest): Promise<RespCreateMeasurement> {
        const response = await this.createMeasurementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Download measurements
     * List measurements when only inst_id is provided
     */
    async downloadMeasurementsRaw(requestParameters: DownloadMeasurementsRequest): Promise<runtime.ApiResponse<RespDownloadMeasurements>> {
        if (requestParameters.instId === null || requestParameters.instId === undefined) {
            throw new runtime.RequiredError('instId','Required parameter requestParameters.instId was null or undefined when calling downloadMeasurements.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        if (requestParameters.withMetadata !== undefined) {
            queryParameters['with_metadata'] = requestParameters.withMetadata;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/measurements/{inst_id}`.replace(`{${"inst_id"}}`, encodeURIComponent(String(requestParameters.instId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDownloadMeasurementsFromJSON(jsonValue));
    }

    /**
     * Download measurements
     * List measurements when only inst_id is provided
     */
    async downloadMeasurements(requestParameters: DownloadMeasurementsRequest): Promise<RespDownloadMeasurements> {
        const response = await this.downloadMeasurementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List measurements.
     * List measurements.
     */
    async listMeasurementsRaw(requestParameters: ListMeasurementsRequest): Promise<runtime.ApiResponse<RespListMeasurements>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listMeasurements.');
        }

        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling listMeasurements.');
        }

        if (requestParameters.instId === null || requestParameters.instId === undefined) {
            throw new runtime.RequiredError('instId','Required parameter requestParameters.instId was null or undefined when calling listMeasurements.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        if (requestParameters.geojson !== undefined) {
            queryParameters['geojson'] = requestParameters.geojson;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.withMetadata !== undefined) {
            queryParameters['with_metadata'] = requestParameters.withMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/streams/projects/{project_id}/sites/{site_id}/instruments/{inst_id}/measurements`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"site_id"}}`, encodeURIComponent(String(requestParameters.siteId))).replace(`{${"inst_id"}}`, encodeURIComponent(String(requestParameters.instId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespListMeasurementsFromJSON(jsonValue));
    }

    /**
     * List measurements.
     * List measurements.
     */
    async listMeasurements(requestParameters: ListMeasurementsRequest): Promise<RespListMeasurements> {
        const response = await this.listMeasurementsRaw(requestParameters);
        return await response.value();
    }

}
