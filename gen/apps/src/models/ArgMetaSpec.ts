/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Applications API
 * The Tapis Applications API provides for management of Tapis applications including permissions.
 *
 * The version of the OpenAPI document: 1.0.0-rc1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    KeyValuePair,
    KeyValuePairFromJSON,
    KeyValuePairFromJSONTyped,
    KeyValuePairToJSON,
} from './';

/**
 * 
 * @export
 * @interface ArgMetaSpec
 */
export interface ArgMetaSpec {
    /**
     * 
     * @type {string}
     * @memberof ArgMetaSpec
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ArgMetaSpec
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArgMetaSpec
     */
    required?: boolean;
    /**
     * 
     * @type {Array<KeyValuePair>}
     * @memberof ArgMetaSpec
     */
    keyValuePairs?: Array<KeyValuePair>;
}

export function ArgMetaSpecFromJSON(json: any): ArgMetaSpec {
    return ArgMetaSpecFromJSONTyped(json, false);
}

export function ArgMetaSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArgMetaSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'keyValuePairs': !exists(json, 'keyValuePairs') ? undefined : ((json['keyValuePairs'] as Array<any>).map(KeyValuePairFromJSON)),
    };
}

export function ArgMetaSpecToJSON(value?: ArgMetaSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'required': value.required,
        'keyValuePairs': value.keyValuePairs === undefined ? undefined : ((value.keyValuePairs as Array<any>).map(KeyValuePairToJSON)),
    };
}


