/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Applications API
 * The Tapis Applications API provides for management of Tapis applications including permissions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ArgMetaSpec,
    ArgMetaSpecFromJSON,
    ArgMetaSpecFromJSONTyped,
    ArgMetaSpecToJSON,
} from './';

/**
 * 
 * @export
 * @interface FileInputDefinition
 */
export interface FileInputDefinition {
    /**
     * 
     * @type {string}
     * @memberof FileInputDefinition
     */
    sourceUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInputDefinition
     */
    targetPath?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInputDefinition
     */
    inPlace?: boolean;
    /**
     * 
     * @type {ArgMetaSpec}
     * @memberof FileInputDefinition
     */
    meta?: ArgMetaSpec;
}

export function FileInputDefinitionFromJSON(json: any): FileInputDefinition {
    return FileInputDefinitionFromJSONTyped(json, false);
}

export function FileInputDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileInputDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceUrl': !exists(json, 'sourceUrl') ? undefined : json['sourceUrl'],
        'targetPath': !exists(json, 'targetPath') ? undefined : json['targetPath'],
        'inPlace': !exists(json, 'inPlace') ? undefined : json['inPlace'],
        'meta': !exists(json, 'meta') ? undefined : ArgMetaSpecFromJSON(json['meta']),
    };
}

export function FileInputDefinitionToJSON(value?: FileInputDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceUrl': value.sourceUrl,
        'targetPath': value.targetPath,
        'inPlace': value.inPlace,
        'meta': ArgMetaSpecToJSON(value.meta),
    };
}


