/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Meta V3 API
 * The Tapis Meta API provides access to a MongoDB database. A standalone service which connects to a MongoDB database and immediately exposes all of MongoDBâ€™s capabilities through a complete REST API, which allows the user to read and write JSON messages and binary data via HTTP.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface CreateDBRequest {
    db: string;
}

export interface DeleteDBRequest {
    ifMatch: string;
    db: string;
}

export interface GetDBMetadataRequest {
    db: string;
}

export interface ListCollectionNamesRequest {
    db: string;
}

/**
 * 
 */
export class DbApi extends runtime.BaseAPI {

    /**
     * Create the database named in the path. This operation is limited to Service admins.
     * createDB
     */
    async createDBRaw(requestParameters: CreateDBRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling createDB.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create the database named in the path. This operation is limited to Service admins.
     * createDB
     */
    async createDB(requestParameters: CreateDBRequest): Promise<void> {
        await this.createDBRaw(requestParameters);
    }

    /**
     * Delete a database. This operation is limited to Service admins.
     * deleteDB
     */
    async deleteDBRaw(requestParameters: DeleteDBRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ifMatch === null || requestParameters.ifMatch === undefined) {
            throw new runtime.RequiredError('ifMatch','Required parameter requestParameters.ifMatch was null or undefined when calling deleteDB.');
        }

        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling deleteDB.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a database. This operation is limited to Service admins.
     * deleteDB
     */
    async deleteDB(requestParameters: DeleteDBRequest): Promise<void> {
        await this.deleteDBRaw(requestParameters);
    }

    /**
     * Get the Metadata for the database.
     * getDBMetadata
     */
    async getDBMetadataRaw(requestParameters: GetDBMetadataRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling getDBMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/_meta`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the Metadata for the database.
     * getDBMetadata
     */
    async getDBMetadata(requestParameters: GetDBMetadataRequest): Promise<object> {
        const response = await this.getDBMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * List the names of all collections in the database.
     * listCollectionNames
     */
    async listCollectionNamesRaw(requestParameters: ListCollectionNamesRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling listCollectionNames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the names of all collections in the database.
     * listCollectionNames
     */
    async listCollectionNames(requestParameters: ListCollectionNamesRequest): Promise<Array<string>> {
        const response = await this.listCollectionNamesRaw(requestParameters);
        return await response.value();
    }

}
