/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Meta V3 API
 * The Tapis Meta API provides access to a MongoDB database. A standalone service which connects to a MongoDB database and immediately exposes all of MongoDBâ€™s capabilities through a complete REST API, which allows the user to read and write JSON messages and binary data via HTTP.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface CreateDocumentRequest {
    db: string;
    collection: string;
    basic?: boolean;
    body?: object;
}

export interface DeleteDocumentRequest {
    db: string;
    collection: string;
    docId: string;
}

export interface GetDocumentRequest {
    db: string;
    collection: string;
    docId: string;
}

export interface ModifyDocumentRequest {
    db: string;
    collection: string;
    docId: string;
    np?: boolean;
    body?: object;
}

export interface ReplaceDocumentRequest {
    db: string;
    collection: string;
    docId: string;
    body?: object;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     *  Create a new document in collection.  A document request body with out the field <_id> gets an auto generated id  A document request body with out the field <_id> writes a document with that id unless a duplicate is encountered.  A batch of document creations is possible by submitting an array of documents in the request body. All those documents  will be added to to the collection in bulk.  The addition of the (basic) query parameter set to true will return a response for a single document creation as a   Tapis basic response with the newly created <_id> for later reference.
     * createDocument
     */
    async createDocumentRaw(requestParameters: CreateDocumentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling createDocument.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling createDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.basic !== undefined) {
            queryParameters['basic'] = requestParameters.basic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *  Create a new document in collection.  A document request body with out the field <_id> gets an auto generated id  A document request body with out the field <_id> writes a document with that id unless a duplicate is encountered.  A batch of document creations is possible by submitting an array of documents in the request body. All those documents  will be added to to the collection in bulk.  The addition of the (basic) query parameter set to true will return a response for a single document creation as a   Tapis basic response with the newly created <_id> for later reference.
     * createDocument
     */
    async createDocument(requestParameters: CreateDocumentRequest): Promise<object> {
        const response = await this.createDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a document in the collection by id.
     * deleteDocument
     */
    async deleteDocumentRaw(requestParameters: DeleteDocumentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling deleteDocument.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling deleteDocument.');
        }

        if (requestParameters.docId === null || requestParameters.docId === undefined) {
            throw new runtime.RequiredError('docId','Required parameter requestParameters.docId was null or undefined when calling deleteDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/{docId}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters.docId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a document in the collection by id.
     * deleteDocument
     */
    async deleteDocument(requestParameters: DeleteDocumentRequest): Promise<void> {
        await this.deleteDocumentRaw(requestParameters);
    }

    /**
     * Get a document form the collection by its _id.
     * getDocument
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling getDocument.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling getDocument.');
        }

        if (requestParameters.docId === null || requestParameters.docId === undefined) {
            throw new runtime.RequiredError('docId','Required parameter requestParameters.docId was null or undefined when calling getDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/{docId}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters.docId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a document form the collection by its _id.
     * getDocument
     */
    async getDocument(requestParameters: GetDocumentRequest): Promise<object> {
        const response = await this.getDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Modify a document in the collection with _id. The fields submitted in the json of the request body will replace the same named fields in the current document.
     * modifyDocument
     */
    async modifyDocumentRaw(requestParameters: ModifyDocumentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling modifyDocument.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling modifyDocument.');
        }

        if (requestParameters.docId === null || requestParameters.docId === undefined) {
            throw new runtime.RequiredError('docId','Required parameter requestParameters.docId was null or undefined when calling modifyDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.np !== undefined) {
            queryParameters['np'] = requestParameters.np;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/{docId}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters.docId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify a document in the collection with _id. The fields submitted in the json of the request body will replace the same named fields in the current document.
     * modifyDocument
     */
    async modifyDocument(requestParameters: ModifyDocumentRequest): Promise<void> {
        await this.modifyDocumentRaw(requestParameters);
    }

    /**
     * Replace a document in the collection with the _id.  Replaces the document with the json document submitted in the request body.
     * replaceDocument
     */
    async replaceDocumentRaw(requestParameters: ReplaceDocumentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling replaceDocument.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling replaceDocument.');
        }

        if (requestParameters.docId === null || requestParameters.docId === undefined) {
            throw new runtime.RequiredError('docId','Required parameter requestParameters.docId was null or undefined when calling replaceDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/{docId}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters.docId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace a document in the collection with the _id.  Replaces the document with the json document submitted in the request body.
     * replaceDocument
     */
    async replaceDocument(requestParameters: ReplaceDocumentRequest): Promise<void> {
        await this.replaceDocumentRaw(requestParameters);
    }

}
