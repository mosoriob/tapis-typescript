/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Meta V3 API
 * The Tapis Meta API provides access to a MongoDB database. A standalone service which connects to a MongoDB database and immediately exposes all of MongoDB’s capabilities through a complete REST API, which allows the user to read and write JSON messages and binary data via HTTP.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface CreateIndexRequest {
    db: string;
    collection: string;
    indexName: string;
    body?: object;
}

export interface DeleteIndexRequest {
    db: string;
    collection: string;
    indexName: string;
}

export interface ListIndexesRequest {
    db: string;
    collection: string;
}

/**
 * 
 */
export class IndexApi extends runtime.BaseAPI {

    /**
     * Create an index on collection in the database.  The request body should hold a json document that defines the index      { \"keys\":  <keys>, \"ops\": <options> }    Example - create an unique, sparse index on property ‘q      {\"keys\": {\"qty\": 1},\"ops\": {\"unique\": true, \"sparse\": true }}
     * createIndex
     */
    async createIndexRaw(requestParameters: CreateIndexRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling createIndex.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling createIndex.');
        }

        if (requestParameters.indexName === null || requestParameters.indexName === undefined) {
            throw new runtime.RequiredError('indexName','Required parameter requestParameters.indexName was null or undefined when calling createIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/_indexes/{indexName}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"indexName"}}`, encodeURIComponent(String(requestParameters.indexName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an index on collection in the database.  The request body should hold a json document that defines the index      { \"keys\":  <keys>, \"ops\": <options> }    Example - create an unique, sparse index on property ‘q      {\"keys\": {\"qty\": 1},\"ops\": {\"unique\": true, \"sparse\": true }}
     * createIndex
     */
    async createIndex(requestParameters: CreateIndexRequest): Promise<void> {
        await this.createIndexRaw(requestParameters);
    }

    /**
     * Delete an index on the collection.
     * deleteIndex
     */
    async deleteIndexRaw(requestParameters: DeleteIndexRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling deleteIndex.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling deleteIndex.');
        }

        if (requestParameters.indexName === null || requestParameters.indexName === undefined) {
            throw new runtime.RequiredError('indexName','Required parameter requestParameters.indexName was null or undefined when calling deleteIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/_indexes/{indexName}`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))).replace(`{${"indexName"}}`, encodeURIComponent(String(requestParameters.indexName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an index on the collection.
     * deleteIndex
     */
    async deleteIndex(requestParameters: DeleteIndexRequest): Promise<void> {
        await this.deleteIndexRaw(requestParameters);
    }

    /**
     * List all indexes in the collection.
     * listIndexes
     */
    async listIndexesRaw(requestParameters: ListIndexesRequest): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters.db === null || requestParameters.db === undefined) {
            throw new runtime.RequiredError('db','Required parameter requestParameters.db was null or undefined when calling listIndexes.');
        }

        if (requestParameters.collection === null || requestParameters.collection === undefined) {
            throw new runtime.RequiredError('collection','Required parameter requestParameters.collection was null or undefined when calling listIndexes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/meta/{db}/{collection}/_indexes`.replace(`{${"db"}}`, encodeURIComponent(String(requestParameters.db))).replace(`{${"collection"}}`, encodeURIComponent(String(requestParameters.collection))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all indexes in the collection.
     * listIndexes
     */
    async listIndexes(requestParameters: ListIndexesRequest): Promise<Array<object>> {
        const response = await this.listIndexesRaw(requestParameters);
        return await response.value();
    }

}
