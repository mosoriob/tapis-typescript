/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Security API
 * The Tapis Security API provides access to the Tapis Security Kernel authorization and secrets facilities.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespProbe,
    RespProbeFromJSON,
    RespProbeToJSON,
} from '../models';

export interface SayHelloRequest {
    pretty?: boolean;
}

/**
 * 
 */
export class GeneralApi extends runtime.BaseAPI {

    /**
     * Lightwieght health check for liveness. No authorization required.
     */
    async checkHealthRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespProbe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/security/healthcheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespProbeFromJSON(jsonValue));
    }

    /**
     * Lightwieght health check for liveness. No authorization required.
     */
    async checkHealth(initOverrides?: RequestInit): Promise<RespProbe> {
        const response = await this.checkHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lightwieght readiness check. No authorization required.
     */
    async readyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespProbe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/security/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespProbeFromJSON(jsonValue));
    }

    /**
     * Lightwieght readiness check. No authorization required.
     */
    async ready(initOverrides?: RequestInit): Promise<RespProbe> {
        const response = await this.readyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Logged connectivity test. No authorization required.
     */
    async sayHelloRaw(requestParameters: SayHelloRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/security/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Logged connectivity test. No authorization required.
     */
    async sayHello(requestParameters: SayHelloRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.sayHelloRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
