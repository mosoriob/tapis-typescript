/**
 * This script fixes a type generation error produced by the openapi-generator-cli
 * library in the typescript model files. When using polymorphisms with the
 * discriminator object, the types generated use the string value of the enum("some_value")
 * rather than the enum type itself(SomeEnum.SomeValue).
 */


var fs = require("fs")

const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1)

const literalToEnum = (literal) => {
    parts = literal.split("_")
    str = ""
    parts.map((part) => {
        str = str + capitalize(part)
    })
    return str
}

console.log("Running post-generation script for the Workflows service")

types = {}

types["Archive"] = {
    enum: "EnumArchiveType",
    literals: ["s3", "system"]
}
types["ReqArchive"] = types["Archive"]
    
types["ReqContext"] = {
    enum: "EnumContextType",
    literals: ["dockerhub", "github", "gitlab", "local"]
}

types["ReqDestination"] = {
    enum: "EnumDestinationType",
    literals: ["dockerhub", "local"]
}

types["ReqIdentity"] = {
    enum: "EnumIdentityType",
    literals: ["dockerhub", "github"]
}

types["ReqTask"] = {
    enum: "EnumTaskType",
    literals: ["image_build", "application", "request", "tapis_job", "tapis_actor", "function", "template"]
}
types["Task"] = types["ReqTask"]
    
// Replaces string literal values with the appropriate Enums and adds typecasting
// where necessary for the types to properly compile
Object.keys(types).map((type, _) => {
    console.log(`Modifying typescript file for ${type} type`)
    modelsDir = "../../gen/workflows/src/models"
    filename = modelsDir + "/" + type + ".ts"

    // Get the contents of the file
    contents = fs.readFileSync(filename, "utf-8")
    
    typeObj = types[type]

    // Add the import line for the enum below the last line of the autogenerated imports
    search_value = "} from './';"
    import_line = `\t${typeObj.enum}`
    contents = contents.replace(search_value, import_line + "\n" + search_value)

    // Relace the strings in the literals property(including the dobule quotes) of the 
    // "type" object with the proper enum type.
    typeObj.literals.map((literal) => {
        contents = contents.replaceAll(
            `'${literal}'`,
            `${typeObj.enum}.${literalToEnum(literal)}`
        )
    })

    // Add the necessary typecasting to the <type>ToJSON function calls
    contents = contents.replaceAll(
        /([A-Z]{1,}[\w]+)ToJSON\(value\);/g,
        "$1ToJSON(<$1>value);"
    )

    fs.writeFileSync(filename, contents)
})